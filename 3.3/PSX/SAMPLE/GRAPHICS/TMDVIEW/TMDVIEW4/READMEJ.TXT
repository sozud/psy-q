$PSDocId: Document Version 1.0 for Runtime Library Version 3.3$


TMDVIEW4	GsDOBJ2 型 オブジェクトを使ったTMDビューワー


				1994.12.9
				CopyRight (C) Sony Computer Entertainment

tuto0:	最もsimpleなGsDOBJ2ビューワー

【起動方法】
		make tuto0	コンパイル＆必要なファイルを読み込み(tuto0)

【操作方法】
		普通のTMDビューワーと同じです。

	左十字キー	並行移動
	右十字キー	回転
	ABホタン	拡大縮小

【モデリングデータ】

		モデリングデータは、以下の１６種類が用意されています。
		ファイル名の gは、 グーローシェーディングデータを
			     tは、 半透明データを
			     lは、 光源計算なしデータを表します。

		モデリングの形状は、すべて立方体でそのうち３面には
		テクスチャは張っておらず、残りの３面には、15bit,8bit,4bit
		のテクスチャが張ってあります。

		このプログラムは、モデリングデータを入れ換えるだけで
		ここにある１６種類すべてのデータをビューイングできます。

		cube3.tmd		フラット３角ポリゴン
		cube3g.tmd		グーロー３角ポリゴン
		cube3gl.tmd		グーロー光源計算なし３角ポリゴン
		cube3gt.tmd		グーロー半透明３角ポリゴン
		cube3gtl.tmd		グーロー半透明光源計算なし３角ポリゴン
		cube3l.tmd		フラット光源計算なし３角ポリゴン
		cube3t.tmd		フラット半透明３角ポリゴン
		cube3tl.tmd		フラット半透明光源計算なし３角ポリゴン

		cube4.tmd		フラット３角ポリゴン
		cube4g.tmd		グーロー３角ポリゴン
		cube4gl.tmd		グーロー光源計算なし３角ポリゴン
		cube4gt.tmd		グーロー半透明３角ポリゴン
		cube4gtl.tmd		グーロー半透明光源計算なし３角ポリゴン
		cube4l.tmd		フラット光源計算なし３角ポリゴン
		cube4t.tmd		フラット半透明３角ポリゴン
		cube4tl.tmd		フラット半透明光源計算なし３角ポリゴン

		また 一般的な モデリングデータ shuttle1.tmdも用意しました。


【テクスチャデータ】
		テクスチャデータは、6種類が用意されている。

		pat4.tim		4bitテクスチャデータ
		pat8.tim		8bitテクスチャデータ
		pat16.tim		16bitテクスチャデータ
		pat4t.tim		4bitテクスチャデータ(半透明）
		pat8t.tim		8bitテクスチャデータ（半透明）
		pat16t.tim		16bitテクスチャデータ（半透明）


【説明】

		GsDOBJ2というオブジェクトは 最も標準的なオブジェクト
		ハンドラです。クリップされたパケットは作成しないため
		パケットのメモリ効率は高いです。

		オブジェクトの使い回し（同じモデルを 違うオブジェクト
		ハンドラで表示する）も可能です。

		オブジェクトの計算ルーチンは GsSortObject4()を使います。

		自動分割機能とは、アトリビュートに自動分割数を設定すると
		実行時にそのオブジェクトの表示されるポリゴンの全てを
		分割するものです。


tuto1:	tuto0.cをGsSortObject4J()を使って書き換えたサンプル

【起動方法】
		psymake tuto1	コンパイル＆必要なファイルを読み込み(tuto5)

【操作方法】
		tuto0と同じ

【モデリングデータ】

		cube3.tmdに限定

【説明】
		このプログラムは GsSortObject4()をGsSortObject4J()に
		書き換えたものです。GsSortObject4J()を使うことで
		GsSortObject4()で呼んでいる 下位関数のうち 不要なものを
		リンクせず コードを小さくすることができます。

		変更した部分は init_all()中で jt_init()を呼ぶようにしたことと
		GsSortObject4 -> GsSortObject4J に変えた部分だけです。

		jt_init()の中では GsTMDfastF3L,GsTMDfastTF3Lのみを登録して
		いるので光源計算型のフラット３角形 でかつ 標準の光源計算を
		する機能しかありません。よって自動分割、FOG計算、光源計算OFFを
		設定することはできません。

		ただし 機能を絞っていることで コードサイズは tuto0に比べて
		48Kbyteも減少しています。

		もし より多くの機能を使う場合は それに応じた関数をテーブルに
		登録すればいいのです。全ての関数をテーブルに登録すると
		GsSortObject4()とコンパチになります。
		GsSortObject4()とコンパチになる jt_init()のひな型が
		libgs.hにコメントとして入っています。jt_init4()

		GsSortObject4() どの下位関数が使われているかを 調べるには
		取り敢えず dmyを先頭につけた関数を登録してみてください。
		（dmyGsTMDfastF3L,dmyGsTMDfastTF3Lなど）
		この関数は 最初に呼ばれた時に その関数の タイプをprintf
		します。


tuto2:	能動的自動分割を行なう

【起動方法】
		psymake tuto2	コンパイル
		psymake load	必要なファイルを読み込み

【操作方法】
		tuto0と同じ

【説明】
		このプログラムは 能動的自動分割を行ないます。
		能動的自動分割を実現する下位関数群 GsA4div...()を
		ジャンプテーブル経由で呼び出すことでこの機能を
		使うことができます。

		下位関数のコードサイズは小さくはないので 不要なポリゴン
		タイプの下位関数は ジャンプテーブルに登録しないで下さい。

		能動的自動分割の条件は GsSetAzwh(z,w,h)により指定します。
		zは 能動的自動分割を開始するための near Z値です。
		この zよりも遠いポリゴンは分割されません。
		w,hは分割後のポリゴンの大きさを規定します。分割後のポリゴンの
		大きさがこのw,hよりも大きいと 更に分割を繰り返します。
		ただし 分割の最大値は attributeの分割数で 決められているので
		それ以上は分割しません。
		


								以上
