$PSDocId: Document Version 1.0 for Runtime Library Version 3.3$
                             メモリカード仕様

                               1994年09月07日
                         改訂  1994年09月09日
                         改訂  1994年10月25日
                         改訂  1994年12月08日

                （株）ソニー・コンピュータエンタテインメント

★ご注意
	PSボード（DTL-H2000）上でメモリカードを運用するためにはパッチプログラ
	ムpatchx.cpeを実行しておく必要があります。
	patchx.cpeによるパッチが無効な状態でのメモリカード関連関数の実行はバス
	エラーなどによるハングアップを引き起こします。


[1] ハードウェア諸元

       ======================================================================
        容量            フォーマット時120Kバイト
                        （128バイトのセクタ単位でアクセス）

        アクセス速度    (1) １セクタ書き込み後、20m秒間アクセス不可
                        (2) 最大連続読みとり速度は約10Kバイト／秒

        その他          電源を落さずに抜き差し可能
                        １０万回書き込み保障
                        20代替セクタ／カード（ファイルシステム内部で実現）
       ----------------------------------------------------------------------


[2] BIOSとファイルシステム諸元

・BIOS
        コントローラ読み込みおよびAB２つのコネクタへのアクセスを共存させるため
        ２VBLANKに１セクタを扱うBIOSを用意しました。
        デメリットとして、１コネクタに対しての連続読みとりを最大速度で行なう
        ことができません。

       ======================================================================
        起動タイミング          VBLANKの先頭（コントローラ読みとり）直後
        実効アクセス速度        ３０セクタ／秒 ＝ 3.75Kバイト／秒
        CPU負荷                 ２枚のカードから連続read時2.5％
                                ２枚のカードに連続write時3.2％
       ----------------------------------------------------------------------


・ファイルシステム

       ======================================================================
        デバイス名              buX0    X:コネクタ番号（０または１）
        ファイル名              21文字までのASCIZ文字
				（先頭にタイトル固有の文字列を含むこと）
        ディレクトリ構造        なし
        管理単位：スロット      8Kバイト（64セクタ）→ファイルサイズの単位
        スロット数              15個／カード（最大ファイル数は15）
        内部使用イベント数      ０（以前の４との記載を修正）
        初期化関数              _bu_init()（起動時は未初期化）
        同時アクセス制限        各差込口に１処理のみ受け付け可能
                                （多重した関数は実行失敗）
        その他                  ファイルcreate時にサイズをスロット単位で指定
                                以後サイズ変更不可
                                容量管理はスロット単位
                                自動代替セクタ機能
                                オープン時自動初期化機能（オプション）
       ----------------------------------------------------------------------


[3] デバッギングステーション上の不具合

	DTL-H1000（デバッギングステーション）におけるメモリカード不具合に対応
	するためのライブラリおよび注意点について解説します。

	・状況

	DTL-H1000（デバッギングステーション）においてメモリカードの動作に関す
	る不具合が報告されています。この原因は当該機のブートROMが開発途中のゲー
	ム実機ブートROMマスクに基づいていることにあります。

	リリース済みのDTL-H2000（PSボード）向けパッチプログラムpatchx.cpeは、
	最終版ブートROMの仕様をPSボードに反映するためのものです。よってメモリ
	カードについては、PSボードとゲーム実機は同等であり、デバッギングステー
	ションだけが不具合のある状態となっています。

	この不具合に対応するため、メモリカードライブラリの仕様を一部変更し、イ
	ベント種別HwCARDを新たに導入します。この変更により、デバッギングステー
	ション、PSボード、そしてゲーム実機のすべてで統一された正常な挙動が得ら
	れるようになります。


[4] 供給物

	       ==============================================================
		ファイル	内容
	       --------------------------------------------------------------
		card4.doc	本ドキュメント
		card.obj	ライブラリ追加オブジェクト
		cman.c		メモリカード管理ユーティリティソース
		cman.cpe	同上 実行ファイル
		makefile.mak	同上 メイクファイル
	       --------------------------------------------------------------

		＊主たるライブラリ関数はlibapi.libに含まれています。


[5] card.docからの仕様変更点

	以下の３点について変更があります。

	・原因ディスプリプタHwCARDを公開します。
	  この原因ディスクリプタに関するイベントは垂直同期割り込み毎に自動的に
	  クリアされます。よってVSync()など垂直同期を待つ関数をはさんでイベン
	  ト発生のテストを行なうと、イベント発生を検出できない状態に陥ります。

	・非同期関数_card_clear()の処理完了を通知するイベントの原因ディスクリ
	  プタを変更します。また、同関数の供給元をlibapi.libからcard.objに変更
	  します。libapi.libは現在のままとし、必ずcard.objを明示的にリンクして
	  ください。

		旧	SwCARD			新	HwCARD

	・物理セクタ指定のアクセス関数_card_read()と_card_write()を公開します。
	  タイトルテストに必要な論理フォーマットの破壊や論理フォーマット済み
	  カードの簡易テストを実装するために使います。


[6] コーディング上の注意点

	・_card_info()の前に_new_card()をコールしてEvSpNEWイベントを抑制しない
	  でください。デバッギングステーションとその他のシステムでの挙動が異
	  なってしまいます。

	・card.objは内部でlibapi.lib中の_card_write()をコールします。同名の関
	  数は作成しないでください。


[7] 既知のバグ

	現在、次のようなバグが報告・検証されています。これらはPSボードやゲーム
	実機においても発生します。

	・メモリカードＡ（向かって左）についてタイムアウトイベントが発生した
	  フレーム中ではコントローラＡ（向かって左）へのアクセスが失敗する。
	  PadRead()の返り値は「全ボタンリリース」となる。


	  ＜差し込み口Ａにカードがセットされていない場合に問題が発生＞

		垂直同期 --------------------------------------------------
				_card_info(0x00)など非同期アクセス要求
				pad = PadRead();    /* 正常 */

		垂直同期 --------------------------------------------------
				カードＡへ通信開始
				pad = PadRead();    /* 正常 */

		垂直同期 --------------------------------------------------
				カードＡタイムアウトイベント発生
				pad = PadRead();    /* コンローラＡ */
						    /* 全ボタンリリース */

		垂直同期 --------------------------------------------------
				pad = PadRead();    /* 正常 */

		垂直同期 --------------------------------------------------


	★運用での対策
	  カードＡへの非同期アクセスを行なう場合は、コントローラがオペレータ
	  の意図に反して全ボタンリリースとなっても問題が発生しないよう設計変更
	  していただく、またはカードＢ（向かって右）を使用するようお願いしま
	  す。


	★以前のバージョンアップ予告について
	  一部に１１月末を目度にバージョンアップを行ない上記バグに対応する予定
	  と記載したドキュメント（card3.doc）を配布いたしましたが、技術的にPS
	  ボード・デバッギングステーション・ゲーム実機の３機種に一通りのライブ
	  ラリで対策を実現することは難しいとの結論に達しました。よって上記バグ
	  の対応およびHwCARDイベント種別の廃止は行なわないこととします。ご了承
	  ください。


[8] card.obj中のサービス関数

・使用イベント

	原因ディスクリプタ:	HwCARD

	イベント種別:		EvSpIOE		処理完了
				EvSpERROR	カード不良
				EvSpTIMOUT	カード無し

	自動的なクリア		この原因ディスクリプタに関するイベントは垂直同
				期割り込み毎に自動的にクリアされます。よって
				VSync()など垂直同期を待つ関数をはさんでイベン
				ト発生のテストを行なうと、イベント発生を検出で
				きない状態に陥ります。

_card_clear

        形式    long _card_clear( chan )
                long chan;

	引数	chan	ポート番号＊１６＋カード番号
				ポート番号:	Ａポート→０  Ｂポート→１
				カード番号:	通常０


        解説    ダミー書き込みをカードのシステム管理領域に行ない、「接続後
                書き込みなし」状態をクリアする。
                 関数自体は非同期処理のため、直ちに終了する。同一のカード差し
                込み口への多重処理登録は行なえない。処理の完了はイベントで通
                知する。

               ===========================================================
                原因ディスクリプタ／イベント種別        内容
               -----------------------------------------------------------
                HwCARD/EvSpIOE                          処理完了
                HwCARD/EvSpTIMOUT                       接続されていない
                HwCARD/EvSpERROR                        通信エラー発生
               -----------------------------------------------------------

        返り値  処理登録に成功すると1を、以外は0を返す。


[9] libapi.lib中の関連関数

	リリース済みドキュメントから転載します。_card_clear()が削除され、
	_card_info()に注意項目が追加されています。


・使用イベント

	原因ディスクリプタ:	SwCARD

	イベント種別:		EvSpIOE		処理完了
				EvSpERROR	カード不良
				EvSpTIMOUT	カード無し
				EvSpNEW		新規カードまたは未初期化

・関数

_card_write     メモリカードの1ブロックへの書き込み

        形式    long _card_write( chan, block, buf )

        引数    chan    ポート番号＊１６＋カード番号
                                ポート番号:     Ａポート→０  Ｂポート→１
                                カード番号:     通常０
                block   ターゲットブロック番号
                buf     128バイトのデータバッファへのポインタ

        解説    chanで指定したメモリカードのblock番ブロックにbufがポイントする
                128バイトデータを書き込む。
                関数自体は非同期処理のため、直ちに終了する。同一のカード差し
                込み口への多重処理登録は行なえない。処理の完了はイベントで通
                知。

               ===========================================================
                原因ディスクリプタ／イベント種別        内容
               -----------------------------------------------------------
                HwCARD/EvSpIOE                          処理完了
                HwCARD/EvSpTIMOUT                       カード未接続
                HwCARD/EvSpNEW                          新規カード検出
                HwCARD/EvSpPERROR                       通信エラー発生
                HwCARD/EvSpERROR                        書き込みエラー発生
                HwCARD/EvSpUNKOWN                       原因不明
               -----------------------------------------------------------

        返り値  処理登録に成功すると1を、以外は0を返す。


_card_read      メモリカードの1ブロックの読み込み

        形式    long _card_read( chan, block, buf )

        引数    chan    ポート番号＊１６＋カード番号
                                ポート番号:     Ａポート→０  Ｂポート→１
                                カード番号:     通常０
                block   ターゲットブロック番号
                buf     128バイトのデータバッファへのポインタ

        解説    chanで指定したメモリカードのblock番ブロックの内容をbufがポイン
                トする128バイトバッファに読み込む。
                関数自体は非同期処理のため、直ちに終了する。同一のカード差し
                込み口への多重処理登録は行なえない。処理の完了はイベントで通
                知。

               ===========================================================
                原因ディスクリプタ／イベント種別        内容
               -----------------------------------------------------------
                HwCARD/EvSpIOE                          処理完了
                HwCARD/EvSpTIMOUT                       カード未接続
                HwCARD/EvSpNEW                          新規カード検出
                HwCARD/EvSpPERROR                       通信エラー発生
                HwCARD/EvSpUNKOWN                       原因不明
               -----------------------------------------------------------

        返り値  処理登録に成功すると1を、以外は0を返す。


InitCARD

        形式    void InitCARD( val )
                long val;

        引数    val     0：コントローラとの併用なし  1：併用

        解説    メモリカードBIOSを初期化し停止状態とする。以降StartCARD()で
                BIOSを稼働状態にすると、_cardで始まる低レベルインタフェースが
                直接使用可能となる。
                メモリカードファイルシステムはこれらのインタフェースを内部で
                使用するので、_bu_init()の前にこの関数を実行する必要がある。
                コントローラには影響を与えない。

        返り値  なし


StartCARD

        形式    void StartCARD( void )

        引数    なし

        解説    InitCARD()で初期化したメモリカードBIOSを稼働状態に移行する。
                コントローラには影響を与えない。

        返り値  なし


StopCARD

        形式    void StopCARD( void )

        引数    なし

        解説    メモリカードBIOSを停止状態（InitCARD()実行直後と同じ状態）に
                移行する。
                コントローラには影響を与えない。

        返り値  なし


_bu_init

        形式    void _bu_init( void )

        引数    なし

        解説    メモリカードファイルシステムを初期化する。
                ファイルシステムドライバは当パッチモジュール組み込み時にカーネ
                ルに登録するが、初期化ルーチンは自動実行しない。この関数により
                明示的にファイルシステムを初期化する必要がある。

        返り値  なし


_card_info	カードの状態を取得

	形式	long _card_info( chan )
		long chan;

	引数	chan	ポート番号＊１６＋カード番号
				ポート番号:	Ａポート→０  Ｂポート→１
				カード番号:	通常０

        解説    chanで指定したメモリカードの接続をテストする。
                関数自体は非同期処理のため、直ちに終了する。同一のカード差し
                込み口への多重処理登録は行なえない。処理の完了はイベントで通
                知。

               ===========================================================
                原因ディスクリプタ／イベント種別        内容
               -----------------------------------------------------------
                SwCARD/EvSpIOE                          接続されている
                SwCARD/EvSpTIMOUT                       接続されていない
                SwCARD/EvSpNEW                          接続後書き込みなし
                SwCARD/EvSpERROR                        通信エラー発生
               -----------------------------------------------------------

	注意	_new_card()でEvSpNEWを抑制しないでください。
		デバッギングステーションと他のシステムで挙動が食い違います。

        返り値  処理登録に成功すると1を、以外は0を返します。


_card_load

        形式    long _card_load( chan )
                long chan;

	引数	chan	ポート番号＊１６＋カード番号
				ポート番号:	Ａポート→０  Ｂポート→１
				カード番号:	通常０

        解説    入出力管理サービスによる非同期アクセスのためにファイルシステム
                にファイル管理情報を読み込む。O_NOWAITモードでメモリカード
                上のファイルをオープンする前に必ず実行する必要がある。カードが
                入れ替わらない限り反復して実行する必要はない。
                関数自体は非同期処理のため、直ちに終了する。同一のカード差し
                込み口への多重処理登録は行なえない。処理の完了はイベントで通
                知する。所要時間は７２VSYNC。
		O_NOWAITモードのopen()を行なう前に必ず１度実行する。

               ===========================================================
                原因ディスクリプタ／イベント種別        内容
               -----------------------------------------------------------
                SwCARD/EvSpIOE                          読み込み完了
                SwCARD/EvSpTIMOUT                       接続されていない
                SwCARD/EvSpNEW                          未初期化カード
                SwCARD/EvSpERROR                        通信エラー発生
               -----------------------------------------------------------

        返り値  処理登録に成功すると1を、以外は0を返す。


_card_auto	自動初期化設定

	形式	long _card_auto( val )
		long val;

	引数	val	0:自動初期化禁止  1:自動初期化許可

	解説	自動初期化機能の有無を設定する。

	返り値	なし



_new_card

        形式    void    _new_card( void )

        引数    なし

        解説    直後の_card_read()または_card_write()でのEvSpNEWイベントの発生
                をマスクする。
                同期処理関数だが直ちに終了する。

        返り値  なし


_card_status

        形式    long _card_status( drv )
                long drv;

        引数    drv     差し込み口番号  0：向かって左  1：向かって右

        解説    差し込み口毎のメモリカードBIOSステータスを取得する。
                同期処理関数だが直ちに終了する。

        返り値  メモリカードBIOSが稼働状態にあれば、次のいずれかの値を返す。


                       =================================================
                        値      状態
                       -------------------------------------------------
                        0x01    登録処理なし
                        0x02    READ処理登録あり
                        0x04    WRITE処理登録あり
                        0x08    接続テスト処理登録あり
                        0x11    登録処理なし（直前にタイムアウト発生）
                        0x21    登録処理なし（直前に通信エラー発生）
                       -------------------------------------------------
_card_wait

        形式    long _card_status( drv )
                long drv;

        引数    drv     差し込み口番号  0：向かって左  1：向かって右

        解説    drvで指定する差し込み口宛の登録処理がなくなるまで待つ。


        返り値  常に1を返す。


_card_chan

        形式    long _card_chan( void )

        引数    なし

        解説    直前にイベントを発生したメモリカードのデバイス番号を返す。
                オープンやテストの有無に関わらず、何らかのイベントが発生すると
                返り値が変更される。（通常はVBLANKの中頃、カードがセットされ
                ていないチャネルでは次のVBLANKでのBIOS起動後、にそれぞれイベン
                トが発生。）

        返り値  16進2桁のデバイス番号


[10] CMAN（メモリカード管理ユーティリティ）

	メモリカードを使用するタイトルのテスト時にお使いいただくユーティリティ
	です。次の機能をGPU画面でメニュー選択する方式になっています。CPE形式で
	RUNすればPSボードで、CD-ROMに焼けばデバッギングステーションで実行でき
	ます。
	サンプルを兼ねたモジュールとしてソースも公開いたします。プログラミング
	の参考にしていただけます。
	
	機能（Ver 1.3 941208A のもの）

		機能	ファイル一覧表示
			カード状態テスト
			論理フォーマット
			論理フォーマット破壊（テスト用）
			同上＋ファイルデータ破壊（テスト用）
			ファイル生成（カードフル発生）
			簡易論理フォーマットテスト

								以上
