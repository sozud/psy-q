$PSDocId: Document Version 1.0 for Runtime Library Version 3.3$

		           PlayStation(R) SPU ストリーミングライブラリ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
		 Copyright (C) 1995 by Sony Computer Entertainment Inc.
						   All Rights Reserved.

	          $Id: stream.txt,v 1.3 1995/09/05 12:11:56 kaol Exp $
────────────────────────────────────
注意:

  ・このドキュメントで解説されている関数群は基本サウンドライブラリ
    (libspu) に収められています。ストリーミングライブラリ (libcd) とは
    無関係です。

────────────────────────────────────

* 1 概念
━━━━━━

  `SPU ストリーミングライブラリ' は、PlayStation(R) のサウンドバッファ
  に保持できないような大きなサイズの波形データを SPU で再生させる機能
  を提供するライブラリです。

  SPU は本来サウンドバッファに保持されている波形データのみ再生させる事
  ができますが、これはすなわちサウンドバッファのサイズ以上のサイズの波
  形データは再生できない事になります。

  そこで、サウンドバッファ内のある限られた領域において、SPU の再生中に
  次に再生されるべき波形データを絶えまなく転送し、SPU での再生を途切れ
  なく行わせ、結果としてサウンドバッファのサイズ以上の波形データを SPU
  にて再生させることになります。


* 2 基本動作
━━━━━━━━

  SPU ストリーミングライブラリは SPU の持つボイスを利用してその再生が
  行われます。ボイス自身が行う再生の処理自体は通常の発音 (Key on) 時の
  再生と変わりありません。

  メインメモリ側には、SPU ストリーミングライブラリに使われる波形データ
  (開始する時点で一部さえあれば可) が保持されます。SPU ストリーミング
  ライブラリで使用される波形データは、

	 “1 つの VAG データのみが含まれている VB ファイル”

  です。これはすなわち、

	     “ヘッダ部分が含まれていない VAG ファイル”
	
  と同等です。

  サウンドバッファ側には SPU ストリーミングライブラリで使われる各ボイ
  ス毎に領域を確保します。SPU ストリーミングライブラリは確保された領域
  にメインメモリ側に保持された波形データを連続的に転送しつつ SPU に再
  生を行わせます。

  SPU ストリーミングライブラリで使われる各ボイス毎のサウンドバッファ内
  の領域を「ストリームバッファ」と呼びます。このストリームバッファは 
  SPU ストリーミングライブラリで使用するボイス 1 つ毎に 1 つ必要です。
  なお、複数のボイスを SPU ストリーミングライブラリで使用した場合、全
  てのストリームバッファはサイズが同一である必要があります。

  また、あるボイスに対してストリームバッファにメインメモリ側に保持され
  た波形データを連続的に転送しつつ SPU に再生を行わせる一連の処理を
  「ストリーム」と呼びます。

  SPU ストリーミングライブラリは、最大 24 ストリームバッファ、および最
  大 24 ストリームを扱うことができ、SPU の持つ 24 ボイス全てを SPU ス
  トリーミングライブラリの使用するボイスとして使用できます。


* 3 波形データの処理
━━━━━━━━━━━━

  SPU ストリーミングライブラリはサウンドバッファのサイズより大きなサイ
  ズの波形データ (VB データ) を扱う事が出来ますが、その波形データはス
  トリームの処理を開始させる際にその全てがメインメモリ上にある必要はあ
  りません。

  SPU ストリーミングライブラリはその処理の任意の時点において、各々のス
  トリームに最低ストリームバッファの半分のサイズの波形データが必要とさ
  れます。ストリーム処理中の波形データの転送要求があった際に、必要とな
  るサイズの波形データの先頭アドレスやその属性を指定する事により、スト
  リーム処理の継続を SPU ストリーミングライブラリに知らせます。

  なお、各々の波形データはその転送時に破壊的に取り扱われます。


* 4 SPU ストリーミングライブラリの 4 つの状態
━━━━━━━━━━━━━━━━━━━━━━━━━

  SPU ストリーミングライブラリはストリームを処理する上で 4 つの状態が
  存在します。

  ・アイドル状態

	ストリームを処理していない状態です。この状態ではストリームバッ
	ファへの転送が行われていませんので、SPU ストリーミングライブラ
	リが PlayStation(R) のシステムに及ぼす負荷はありません。

	また、この状態で SPU ストリーミングライブラリの全ての処理を終
	了することが出来ます。

  ・前準備状態

	ストリームの処理を始める上で、ストリームの実際の発音のタイムラ
	グを排除するため、ストリーム処理の事前に全てのストリームに対し
	てストリームバッファの半分のサイズの波形データをストリームバッ
	ファに転送する必要があります。その転送中および転送終了の状態が
	この「前準備状態」です。転送の終了においては後述の「前準備終了
	callback 関数」により知る事が出来ます。

  ・転送状態

	前準備終了後、実際に発音が行われ、指定されたストリームにおいて
	動作している状態です。この状態でも上記“前準備”の要求は受け付
	けますが、状態としては「前準備状態」には遷移せず、「転送状態」
	のまま前準備の処理も行われます。

	この状態においてもストリームバッファの半分のサイズが処理されま
	すが、その処理は後述の「転送終了 callback 関数」により知る事が
	出来ます。

  ・終了作業状態

	全てのストリームに対して終了指定が行われ、「アイドル状態」に向
	かっている状態です。この状態ではすでに転送は行われていません。
	なお、この状態では新たな「前準備」の要求や「転送」の要求は受け
	付けられません。一度「アイドル状態」になった時点で「前準備」の
	要求が受け付けられます。


     +--> アイドル状態 --> 前準備状態 --> 転送状態 --> 終了作業状態 --+
     |								      |
     +----------------------------------------------------------------+


* 5 callback 関数
━━━━━━━━━━━

  SPU ストリーミングライブラリはストリームを処理する上で 3 種類の 
  callback 関数を提供します。

  なお、全ての callback 関数は複数のストリームに対して 1 回のみ呼ばれ
  ます。要求されたストリームは callback 関数の引数によって判断する事が
  出来ます。

  ・前準備終了 callback 関数

	上記「前準備状態」において、その転送が全て終わった際に呼ばれる 
	callback 関数です。

  ・転送終了 callback 関数

	ストリームバッファのサイズの半分の波形データを転送し終えた時点
	で呼ばれる callback 関数です。この中で、次回転送の属性を設定し
	ます。ただし、「前準備状態」の転送終了においてはこの callback 
	関数は呼ばれません。

  ・ストリーム終了 callback 関数

	「終了」が指定されたストリームの再生が終わった時点で呼ばれる 
	callback 関数です。

  各ストリームの次回転送の属性については「転送終了 callback 関数」にお
  いて処理する必要があります。また、前準備からストリームの開始を連続的
  に行うのであれば「前準備終了 callback 関数」でも次回転送の属性を設定
  する必要があります。

  各 callback 関数は設定されなければ処理は続いていきますが、各ストリー
  ムの次回の転送の属性は毎回必ず設定されなければいけないので、「転送終
  了 callback 関数」は必ず設定されなければならず、また、その callback 
  関数の中で次回の転送の属性は必ず設定されなければいけません。

                            |
        [アイドル状態]      |
      --------------------  + <== SpuStTransfer (SPU_ST_PREPARE,)
                            |
         [前準備状態]       +----> 前準備終了 callback 関数
                            |
      --------------------  + <== SpuStTransfer (SPU_ST_PLAY,)
                            | (ストリームバッファへ転送)
                            +----> 転送終了 callback 関数
                            |
                            |
          [転送状態]	    | (ストリームバッファへ転送)
                            +----> 転送終了 callback 関数
                            |
                          -----          
                          -----          
                            |
			    | (ストリームバッファへ転送)
           ストリーム A ==> +----> 転送終了 callback 関数
           終了		    |
                            |
                            | (ストリームバッファへ転送)
                            +----> 転送終了 callback 関数
                            |
                            |
                            +----> ストリーム A に対する
                            |      ストリーム終了 callback 関数
                            | (ストリームバッファへ転送)
                            +----> 転送終了 callback 関数
                            |
                          -----          
                          -----          
                            | (ストリームバッファへ転送)
       最後のストリーム ==> +----> 転送終了 callback 関数
       終了                 |
      --------------------  |
                            |
        [終了作業状態]      |
                            |
      --------------------  +----> ストリーム終了 callback 関数
        [アイドル状態]      |


* 6 ストリームの処理
━━━━━━━━━━━━

** 6.1 ストリームの前準備と開始
──────────────────

  各ストリームの前準備は必ずストリームバッファの前半部分を対象に行われ、
  転送対象となる波形データがストリームバッファの前半部分に転送されます。
  よって、「アイドル状態」の場合にストリームの前準備を行った場合は即座
  に処理されますが、「転送状態」の場合にストリームの前準備を行った場合
  は、ストリームバッファの前半部分に転送の対象が移るまで待たされ、スト
  リームバッファの前半部分に転送の対象が移った際に他のストリームの処理
  と同等に転送が行われます。

  各ストリームの開始は (前準備によってストリームバッファの前半部分に既
  に波形データが転送されているため) 必ずストリームバッファの後半部分か
  ら転送が行われます。よって、「前準備状態」の場合にストリームの開始を
  行った場合は即座に処理されますが、「転送状態」の場合にストリームの開
  始を行った場合は、ストリームバッファの後半部分に転送の対象が移るまで
  待たされ、ストリームバッファの後半部分に転送の対象が移った際に他のス
  トリームの処理と同等に転送が行われます。

** 6.2 次回転送のための属性
────────────────

  各ストリームの次回転送の属性については「転送終了 callback 関数」にお
  いて指定します。必要とされる属性は以下の通りです。

	・次回転送される波形データ (必要とされるサイズはストリームバッ
	  ファのサイズの 1/2) の領域の先頭アドレス

	・次回の転送でストリームを終了するのであれば、

		o status に「終了」の指定
		o 最後に転送する波形データのサイズの指定 (サイズはスト
		  リームバッファのサイズの 1/2 以下)

** 6.3 ストリームの終了
─────────────

  各ストリームの終了は次回転送属性指定時に、属性の中の status に「終了」
  の指定と、最後に転送する波形データのサイズの指定 (サイズはストリーム
  バッファのサイズの 1/2 以下) を行う事により、その時に設定した次回転
  送される波形データが再生を終えた時にストリームが終了します。

** 6.4 発音/消音
──────────

  SPU ストリーミングライブラリは発音 (Key on) のみ自動的に行われます。
  発音 (Key on) はストリーミングの開始が処理された際に行われます。消音 
  (Key off) についてはプログラム側で処理を行う必要があります。

  ただし、ストリームが処理されている状態のボイスに消音 (Key off) を行
  うとサウンドライブラリ全体として状態が不定になる場合があります。必ず
  ストリームの終了処理を行った上で消音の処理を行う必要があります。


* 7 ストリームの実際の処理の流れ
━━━━━━━━━━━━━━━━━━

  以下に SPU ストリーミングライブラリにおける処理の簡単な流れを掲げま
  す。個々の関数における詳細な説明はそれぞれの関数の詳説を参照下さい。

** 7.1 初期化
─────────

  SpuStInit() により SPU ストリーミングライブラリの初期化を行います。

	SpuStEnv *stenv;
	stenv = SpuStInit (0);

  SpuStInit() が返す SpuStEnv 構造体は以下のような構成になっています。

    ================================================================
    typedef struct {
        char status;                /* stream status */
        char pad1;                  /* padding */
        char pad2;                  /* padding */
        char pad3;                  /* padding */
        long last_size;             /* the size of last transferring
                                       (last_size <= (size / 2)) */
        unsigned long buf_addr;     /* The start address of stream
				       buffer */
        unsigned long data_addr;    /* The start address of SPU
				       streaming data in main memory */
    } SpuStVoiceAttr;
    
    typedef struct {
        long size;                  /* The size of stream buffer */
        SpuStVoiceAttr voice [24];
    } SpuStEnv;
    ================================================================

  この構造体に属性を指定し、ストリームの処理を行います。

*** 7.1.1 属性の初期化
─────────────

  全てのストリームに共通な属性は SpuStEnv 構造体の size です。これには
  全てのストリームバッファで同一である、ストリームバッファのサイズを指
  定します。

	例:
		stenv->size = 0x8000;

  各ストリームに対して初期化しなければいけない属性は、

	1. ストリームバッファの先頭アドレス

		= SpuStEnv 構造体の voice[].buf_addr

	   例:
	   	unsigned long buf_addr;
		if ((buf_addr = SpuMalloc (0x8000)) == -1) {
		    /* ERROR */
		}
		stenv->voice [n].buf_addr = buf_addr;

	2. メインメモリ上にある「前準備」で転送する波形データの
	   領域の先頭アドレス

		= SpuStEnv 構造体の voice[].data_addr

	   例:
	   	stenv->voice [n].data_addr = 0x80yyyyyy;

  です。配列 stenv->voice の添字 (上記の例では n) はボイスの番号と一致
  します。

*** 7.1.2 callback 関数の設定
─────────────────

  必要に応じて各 callback 関数を設定します。SPU ストリーミングライブラ
  リの全ての callback 関数は以下の型をとります。

	SpuStCallbackProc
	callback_proc (unsigned long voice_bit, long c_status)

  callback 関数が実際に呼ばれた際、引数の voice_bit には各 callback 関
  数の中で処理を必要とするボイス番号の値が SPU_0CH, SPU_1CH, ...,
  SPU_23CH のビット和で与えられます。また、引数の c_status には現在ど
  の状態で callback 関数が呼ばれたかが与えられます。プログラム側は引数
  の voice_bit と c_status を解析し、適切な処理を行います。

  各ストリームを処理させるためには、最低でも「転送終了 callback 関数」
  は必ず設定される必要があります。これらの callback 関数で、次回転送さ
  れる波形データの領域の先頭アドレスを指定し、また、ストリームを終了さ
  せる際には「終了」の属性を指定します。

*** 7.1.3 各ボイスの設定
──────────────

  ストリームが行われる各ボイスの属性を設定します。ボイスの属性の中で、
  「波形データ先頭アドレス」にはストリームバッファの先頭アドレスと同じ
  値を設定します。

	例:
		SpuVoiceAttr s_attr;

			:
		s_attr.voice = SPU_3CH;
		s_attr.addr  = stenv->voice [3].buf_addr;
			:
		SpuSetVoiceAttr (&s_attr);


** 7.2 ストリームの前準備
───────────────

  ストリームの実際の発音のタイムラグを排除するため、ストリームを開始す
  る前の前準備として、ストリームバッファの半分のサイズの波形データをス
  トリームバッファに事前に転送します。ストリームの前準備を行う関数は 
  SpuStTransfer()で、第 1 引数に SPU_ST_PREPARE を指定します。

  ストリームに使用するボイスは SpuStTransfer() の第 2 引数に SPU_0CH,
  SPU_1CH, ..., SPU_23CH のビット和で指定します。指定されたボイスは必
  ず上記「属性の初期化」が行われていなければいけません。

	例:
		SpuStTransfer (SPU_ST_PREPARE, (SPU_0CH | SPU_1CH));

  該当するボイスに対するストリームの前準備の転送が終了すると「前準備終
  了 callback 関数」が呼ばれます。

  前準備からストリームの開始を行う前に、次回転送の属性を設定する必要が
  あります。前準備からストリームの開始を連続的に行うのであれば「前準備
  終了 callback 関数」で次回転送の属性を設定する必要があります。

  次回転送の属性としては、次回転送される波形データ (必要とされるサイズ
  はストリームバッファのサイズの 1/2) の領域の先頭アドレスを指定します。

	例:
	   	stenv->voice [n].data_addr += (0x8000 / 2);

  波形データが置かれる実際のメインメモリ内の領域は、設定の各回において
  前回の領域と連続している必要はありません。任意の領域の指定が可能です。

** 7.3 ストリームの開始
──────────────

  各ストリームに対して前準備が終了すると、ストリームを開始することが出
  来ます。ストリームの開始を行う関数は、前準備と同様に SpuStTransfer() 
  で、第 1 引数に SPU_ST_PLAY を指定します。

  ストリームに使用するボイスは SpuStTransfer() の第 2 引数に SPU_0CH,
  SPU_1CH, ..., SPU_23CH のビット和で指定します。この値は前準備の時に
  指定した値と同一でなければいけません。

	例:
		SpuStTransfer (SPU_ST_PLAY, (SPU_0CH | SPU_1CH));

  ストリームを開始させると、即座に発音 (Key on) されます。

  全てのストリームに対して 1 回の転送が終了すると「転送終了 callback 
  関数」が呼ばれます。

  「転送終了 callback 関数」では次回転送の属性を設定します。

  次回転送の属性としては、次回転送される波形データ (必要とされるサイズ
  はストリームバッファのサイズの 1/2) の領域の先頭アドレスを指定します。

	例:
	   	stenv->voice [n].data_addr += (0x8000 / 2);

  波形データが置かれる実際のメインメモリ内の領域は、設定の各回において
  前回の領域と連続している必要はありません。任意の領域の指定が可能です。

  1 つ以上のストリームが処理されている間は、必ず、

    ・転送終了の際に「転送終了 callback 関数」

  が呼ばれます。

** 7.4 ストリームの終了
──────────────

  ストリームを終了させる際には、「転送終了 callback 関数」処理内の次回
  の転送時の属性指定の際に SpuStEnv 構造体の voice[].status に 
  SPU_ST_STOP を設定し、voice[].last_size に最後に転送する波形データの
  サイズの指定 (サイズはストリームバッファのサイズの 1/2 以下) を指定
  します。ストリームは SPU_ST_STOP が指定された時の波形データの領域を
  転送してストリームを終了します。

	例:
	   	stenv->voice [n].data_addr += (0x8000 / 2);
	   	stenv->voice [n].status = SPU_ST_STOP;
	   	stenv->voice [n].last_size = 0x4000;

  ストリームの再生が終了した時点 (他のストリームが処理されている場合は、
  厳密には次回の転送が始まる前) で「ストリーム終了 callback 関数」が呼
  ばれます。

** 7.5 終了
────────

  SpuStQuit() により SPU ストリーミングライブラリの終了を行います。

	SpuStQuit ();

  終了を行う上で、全てのストリームは終了の処理が行われ、「ストリーム終
  了 callback 関数」が呼ばれた後の状態 (すなわち「アイドル状態」) でな
  ければいけません。

────────────────────────────────────
		 Copyright (C) 1995 by Sony Computer Entertainment Inc.
────────────────────────────────────


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


	            PlayStation(R) SPU ストリーミングライブラリ関数詳説
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


  SpuStInit
────────────────────────────────────

    機能

	SPU ストリーミングの初期化

    形式

	SpuStEnv *
	SpuStInit (long mode)

    引数

	mode:	現在の仕様では引数は使われていない。0 を指定する。

    解説

	ストリーミングの初期化を行う。実行するプログラム内で 1 回のみ
	呼ばれる。初期化後、SPU ストリーミングが利用可能になる。

	返り値として SPU ストリーミング環境を設定する構造体へのポイン
	タを返す。

    返り値

	SPU ストリーミング環境構造体 SpuStEnv へのポインタ

    型

        typedef struct {
            char status;                /* stream status */
            char pad1;                  /* padding */
            char pad2;                  /* padding */
            char pad3;                  /* padding */
            long last_size;             /* the size of last transferring
                                           (last_size <= (size / 2)) */
            unsigned long buf_addr;     /* The start address of stream
    				       buffer */
            unsigned long data_addr;    /* The start address of SPU
    				       streaming data in main memory */
        } SpuStVoiceAttr;
        
        typedef struct {
            long size;                  /* The size of stream buffer */
            SpuStVoiceAttr voice [24];
        } SpuStEnv;


    関連項目

	SpuStQuit


  SpuStQuit
────────────────────────────────────

    機能

	SPU ストリーミングの終了

    形式

	long
	SpuStQuit (void)

    引数

	なし

    解説

	SPU ストリーミングの終了を行う。

	終了を行う上で、全てのストリームは終了の処理が行われていなけれ
	ばならない。

    返り値

	SPU_ST_ACCEPT	... 正常終了

	SPU_ST_WRONG_STATUS
			... SpuStQuit が受け入れられない状態に
			    ある。受け入れられない状態は以下の通り。

			    ・現在の状態が SPU_ST_IDLE でない

    関連項目

	SpuStInit, SpuStGetStatus


  SpuStGetStatus
────────────────────────────────────

    機能

	SPU ストリーミングの状態の診断

    形式

	long
	SpuStGetStatus (void);

    引数

	なし

    解説

	SPU ストリーミングの状態の診断を行う

    返り値

	SPU_ST_NOT_AVAILABLE
			... SPU ストリーミングが使用不可の状態。
			    すなわち SpuStInit() を呼んでない状態。

	SPU_ST_IDLE	... サウンドバッファへデータ転送を行って
			    いない状態。

	SPU_ST_PREPARE	... 最初の 1 バッファ分を転送している状態。

	SPU_ST_TRANSFER ... サウンドバッファへデータを転送している
			    状態。
			    この状態で SpuStTransfer(SPU_ST_PREPARE,)
			    を行っても SPU_ST_PREPARE には遷移せずに
			    処理される。

	SPU_ST_FINAL	... 最後の 1 バッファを転送し終え、その再生の
			    終了を待っている状態。
			    この状態では SpuStTransfer() は受け付けら
			    れない

    関連項目

	SpuStInit, SpuStTransfer, SpuStGetVoiceStatus


  SpuStGetVoiceStatus
────────────────────────────────────

    機能

	SPU ストリーミングで使用されているボイスの診断

    形式

	unsigned long
	SpuStGetVoiceStatus (void);

    引数

	なし

    解説

	SPU ストリーミングで使用されているボイスの診断を行う

    返り値

	現在 SPU ストリーミングで使用されているボイスを SPU_0CH,
	SPU_1CH, ..., SPU_23CH のビット和で表現した値

    関連項目

	SpuStTransfer, SpuStGetStatus


  SpuStSetPreparationFinishedCallback
────────────────────────────────────

    機能

	SPU ストリーミングにおけるストリームの前準備で行われるデータ転
	送終了時の callback 関数の設定

    形式

	SpuStCallbackProc
	SpuStSetPreparationFinshedCallback (SpuStCallbackProc
					    callback_proc);

	SpuStCallbackProc
	callback_proc (unsigned long voice_bit, long status)

    引数

	callback_proc:
		ストリームの前準備で行われるデータ転送終了時に呼ばれる 
		callback 関数へのポインタ

    解説

	SPU ストリーミングにおけるストリームの前準備で行われるデータ転
	送終了時に呼ばれる callback 関数を設定する

	callback_proc が呼ばれた際の引数には、voice_bit にストリームの
	前準備で行われるデータ転送が終了したストリームに割り当てられた
	ボイスの値が SPU_0CH, SPU_1CH, ..., SPU_23CH のビット和で表現
	されて与えられる。status には SPU ストリーミングライブラリの状
	態により以下の値が与えられる。

		状態			status
		----------------------------------------
		SPU_ST_PREPARE		SPU_ST_PREPARE
		SPU_ST_PLAY		SPU_ST_PLAY

    返り値

	以前設定されていた、ストリームの前準備で行われるデータ転送終了
	時の callback 関数へのポインタ。

	以前に設定されていなければ NULL を返す。

    関連項目

	SpuStTransfer, SpuStSetTransferFinishedCallback,
	SpuStSetStreamFinishedCallback


  SpuStSetTransferFinishedCallback
────────────────────────────────────

    機能

	SPU ストリーミングにおける全てのストリームに対するストリームバッ
	ファへの 1 回の転送の終了時の callback 関数の設定

    形式

	SpuStCallbackProc
	SpuStSetTransferFinishedCallback (SpuStCallbackProc callback_proc);

	SpuStCallbackProc
	callback_proc (unsigned long voice_bit, long status)

    引数

	callback_proc:
		全てのストリームに対するストリームバッファへの 1 回の
		転送の終了時に呼ばれる callback 関数へのポインタ

    解説

	SPU ストリーミングにおける全てのストリームに対するストリームバッ
	ファへの 1 回の転送の終了時に呼ばれる callback 関数を設定する

	callback_proc が呼ばれた際の引数には、voice_bit にストリームバッ
	ファへの 1 回の転送が終了したストリームに割り当てられたボイス
	の値が SPU_0CH, SPU_1CH, ..., SPU_23CH のビット和で表現されて
	与えられる。status は常に SPU_ST_PLAY が与えられる。

    返り値

	以前設定されていた、全てのストリームに対するストリームバッファ
	への 1 回の転送の終了時の callback 関数へのポインタ。

	以前に設定されていなければ NULL を返す。

    関連項目

	SpuStTransfer, SpuStSetPreparationFinishedCallback,
	SpuStSetStreamFinishedCallback


  SpuStSetStreamFinishedCallback
────────────────────────────────────

    機能

	SPU ストリーミングにおける各ストリームの処理終了時の callback 
	関数の設定

    形式

	SpuStCallbackProc
	SpuStSetStreamFinishedCallback (SpuStCallbackProc callback_proc);

	SpuStCallbackProc
	callback_proc (unsigned long voice_bit, long status)

    引数

	callback_proc:
		各ストリームの処理終了時に呼ばれる callback 関数へのポ
		インタ

    解説

	SPU ストリーミングにおける各ストリームの処理終了時に呼ばれる 
	callback 関数を設定する。

	callback_proc が呼ばれた際の引数には、voice_bit に処理が終了し
	たストリームに割り当てられたボイスの値が SPU_0CH, SPU_1CH, ...,
	SPU_23CH のビット和で表現されて与えられる。status には SPU ス
	トリーミングライブラリの状態により以下の値が与えられる。

		状態			status
		----------------------------------------
		SPU_ST_PLAY		SPU_ST_PLAY
		SPU_ST_FINAL		SPU_ST_FINAL

    返り値

	以前設定されていた、各ストリームの処理終了時の callback 関数へ
	のポインタ。

	以前に設定されていなければ NULL を返す。

    関連項目

	SpuStTransfer, SpuStSetPreparationFinishedCallback,
	SpuStSetTransferFinishedCallback


  SpuStTransfer
────────────────────────────────────

    機能

	SPU ストリーミングにおけるストリームの前準備、および開始の指示

    形式

	long
	SpuStTransfer (long flag, unsigned long voice_bit);

    引数

	flag: = SPU_ST_PREPARE	ストリーム前準備の指定
	      = SPU_ST_PLAY	ストリーム開始の指定

	voice_bit:		ストリームを行うボイス

    解説

	SPU ストリーミングにおけるストリームの前準備、および開始の指示
	を行う。

	voice_bit には SPU_0CH, SPU_1CH, ..., SPU_23CH のビット和でス
	トリームを行うボイスを明示的に設定する。

	[前準備: SPU_ST_PREPARE]

	  本関数が flag == SPU_ST_PREPARE で呼ばれた場合、SpuStInit で
	  返された SpuStEnv 構造体の属性に従い、ストリームの前準備を行
	  う。

	  前準備の終了は SpuStSetPreparationFinishedCallback で設定さ
	  れた callback 関数により判断される。

	[開始: SPU_ST_PLAY]

	  本関数が flag == SPU_ST_PLAY で呼ばれた場合、SpuStInit で返
	  された SpuStEnv 構造体の属性に従い、ストリームの開始を行う。

	  SPU ストリーミングの状態が SPU_ST_PREPARE の場合、本関数が呼
	  ばれた時点で、引数 voice_bit の妥当性の解析の後、voice_bit 
	  で指定されたボイスに対して即座に発音 (Key on) を行う。

	  SPU ストリーミングの状態が SPU_ST_TRANSFER の場合、本関数が
	  呼ばれた時点から次にストリームバッファの後半部分に転送の対象
	  が移るまで処理が待たされ、ストリームバッファの後半部分に転送
	  の対象が移った際に他のストリームの処理と同等に転送が行われる。

	  全てのストリームに対するストリームバッファへの 1 回の転送が
	  終了すると SpuStSetTransferFinishedCallback で設定された 
	  callback 関数が呼ばれ、各ストリームの次回転送の属性を設定す
	  る。

	  ストリームが終了すると SpuStSetStreamFinishedCallback で設定
	  された callback 関数がストリームの再生が終了した時点 (他のス
	  トリームが処理されている場合は、 厳密には次回の転送が始まる
	  前) で呼ばれる。

    返り値

	SPU_ST_NOT_AVAILABLE
			... SPU ストリーミングが使用不可。
			    すなわち SpuStInit() を呼ばれていない。

	SPU_ST_INVALID_ARGUMENT
			... 仕様にあっていない値の引数が設定された。

	SPU_ST_WRONG_STATUS
			... SpuStTransfer が受け入れられない状態に
			    ある。受け入れられない状態は以下の通り。

			    ・flag に依らず、現在の状態が SPU_ST_FINAL

			    ・flag == SPU_ST_PREPARE で、かつ、現在の
			      状態が SPU_ST_PREPARE

			    ・flag == SPU_ST_PLAY で、かつ、現在の状態
			      が SPU_ST_IDLE

	SPU_ST_ACCEPT	... 処理を受け付けた。

    関連項目

	SpuStInit, SpuStSetPreparationFinishedCallback,
	SpuStSetTransferFinishedCallback,
	SpuStSetStreamFinishedCallback


────────────────────────────────────
		 Copyright (C) 1995 by Sony Computer Entertainment Inc.
────────────────────────────────────
