$PSDocId: Document Version 1.0 for Runtime Library Version 3.3$

				  PlayStation(R) 基本サウンドライブラリ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	     Copyright (C) 1994,1995 by Sony Computer Entertainment Inc.
						    All Rights Reserved.

		$Id: abstract.txt,v 1.10 1995/09/07 13:56:32 kaol Exp $
────────────────────────────────────

* 1 概要

  基本サウンドライブラリ (旧称 SPU ライブラリ) は PlayStation(R) の持
つサウンド再生処理プロセッサ (SPU) を直接制御するライブラリです。拡張
サウンドライブラリ (libsnd) の下層を受け持つライブラリではありますが、
利用できる機能としては、データの内容にこだわらないデータ (例えばテクス
チャデータなど) のサウンドバッファへの転送など、基本サウンドライブラリ
独自の機能も提供しています。

  基本サウンドライブラリは SPU 用のライブラリとしてのみ機能しますので、
時間管 理機能は持っていません。これは別途提供されるカーネルライブラリ
(libapi) などにより管理される必要があります。

* 2 機能

  基本サウンドライブラリで制御できる機能を以下に掲げます。

** 2.1 ADPCM  音源制御機能

  24 の ADPCM 音源 (以下、これを `ボイス' と呼びます) に対して、個別に
以下の属性を指定できます。

     ・音量(L/R 独立に指定可能)
     ・音程
     ・サウンドバッファ内の波形データのアドレス
     ・エンベロープ(ADSR)
     ・ループポイント

  これらを設定し、キーオン/キーオフを指定します。キーオン/キーオフも
24 ボイス独立に指定できます。また、これらの属性はキーオンされて発音さ
れている間にも変更可能です。よって、発音中に連続的に音程を変えたり、ルー
プポイントを持つ波形データのループポイントを変化しつつ発音を繰り返すこ
ともできます。

** 2.2 ノイズ音源制御機能

  SPU は 1 つのノイズ発生器を持っています。このノイズ発生器はサウンド
バッファの波形データの代わりとして各ボイスに設定して利用することができ、
エンベロープなどの効果もかかり、その聴感上の音程 (ノイズクロック) を発
音中に変えることによりノイズ音に効果をつけることが出来ます。

** 2.3 音程における LFO 制御機能

  隣り合うボイスを使用して、音程に LFO (Low Frequency Oscillator) をか
けた効果を得ることが出来ます。

  式で表現すると以下のようになります。

		 NewPitch(n) = (1 + V(n-1)) * Pitch(n)

	NewPitch(n) :		ボイス(n) の最終的なピッチ
	V(n-1) :		ボイス(n-1) の音量 (時間によって変化)
	Pitch(n) :		ボイス(n) に本来設定されているピッチ

  このため、1 つの音色を発音するために、2 つのボイスを消費することにな
ります。

** 2.4 リバーブ制御機能

  リバーブは数種類のテンプレートを用意して提供されます。これらのテンプ
レートにはいくつかの変更可能なパラメータがあり、これらを変更することに
よってその効果を変えることが出来ます。

  リバーブはそのワークエリアとしてサウンドバッファを利用します。そのオ
フセット (先頭) アドレスは個々のパラメータによって違いますが、これらも
テンプレートとして用意されますので、このオフセット (先頭) アドレスより
前方の領域が実際の波形データ領域として利用できることになります。

  リバーブのオン/オフは全体としてだけでなく、各ボイス毎に設定が可能で、
CD 入力、及び外部デジタル入力 (後述) に対してもその効果をかけることが
できます。

** 2.5 サウンドバッファへの任意のデータの転送機能

  メインメモリからサウンドバッファへ波形データを転送 (= Write) する場
合、あるいはサウンドバッファからメインメモリへ波形データを転送
(= Read) する場合、以下の手法が利用できます。

     ・I/O 転送(Write のみ)
     ・DMA 転送(Write/Read)

  `DMA 転送' の場合には、DMA コントローラにより `非同期に' 転送を行う
ため、転送中にも CPU が他の処理を行うことが可能です。

  `I/O 転送' については、CPU を使って転送を行うため、転送中には他の処
理を行うことが出来ません。そのため、演奏を行いながら転送を行う場合は必
ず `DMA 転送' を選ぶ必要があります。

  サウンドバッファからメインメモリへ転送する際には必ず DMA 転送で行わ
れるため、特に設定の必要はありません。

  ただし、転送するデータが保持されている、あるいはデータを受け取るメイ
ンメモリのアドレスは、大域変数として取られた変数へのアドレスか、malloc 
などでヒープ領域に取られた変数へのアドレスでなければいけません。すなわ
ち関数内で宣言された変数(auto 変数) などのスタック領域へのアドレスであっ
てはなりません。

  また、サウンドバッファにおいて、積極的なメモリ管理は行わない (後述) 
ので、ユーザは以下の領域を避けた領域へ転送を行わなければ、その転送され
たデータは実質的な波形データとして利用できません。

     ・0x00000 〜0x00fff までの SPU デコードデータ転送領域
     ・0x01000 〜0x01010 までのシステム予約領域
     ・リバーブのワークエリアオフセット(先頭) アドレス(後述) 以降


	SPU デコード	┌───────┐0x00000
	データ領域    ↑│		│
      ─────────├───────┤0x01000
	システム予約	│		│
      ─────────├───────┤0x01010
			│		│
			│		│
			│		│
	波形データ	│		│
	転送可能領域	│		│
			│		│
			│		│
			│		│
      ─────────├───────┤← リバーブオフセット
	リバーブ      ↓│		│   アドレス
	ワークエリア	│		│   ... リバーブの種類に
			│		│	 よって可変
			│		│
			└───────┘0x7ffff

		 図 1:  サウンドバッファのメモリ配置

** 2.6 サウンドバッファアクセスに対する割り込みリクエスト機能

  サウンドバッファは、転送に関するアクセスだけでなく、その転送された波
形データをサウンドとして出力するために SPU がデコードする時にも常時ア
クセスされます。

  そのサウンドバッファへの任意なアクセスにおいて、特定アドレスへアクセ
スした場合にハードウェア的に割り込みを発生させること (割り込みリクエス
ト) ができます。また、その割り込みリクエストに応じて特定の関数を呼び出
すように指定することができます。

** 2.7 サウンドバッファのメモリ管理

  サウンドバッファのメモリ管理機能については、ごく限られた機能を持つラ
イブラリを提供します。これは、メモリの占有テーブルのみを管理し、その情
報のみを報告するもので、その情報に従ってサウンドバッファの領域に転送を
行う、という形態をとることにより簡易的にサウンドバッファのメモリ管理を
行うことが出来ます。

** 2.8 CD, 及び外部デジタル入力とのミキシング機能

  外部入力として以下に掲げる 2 系統が SPU に搭載されています。

     ・CD 入力
     ・外部デジタル入力

  サンプリング周波数はどちらも 44.1 kHz です。

  これらから入力されたサウンドと SPU の出力とをデジタルミキシングでき
ます。またリバーブへもその入力を振り分けることができます。

** 2.9 SPU  でデコードされたデータのメインメモリへの転送

  SPU は CD 入力のボリューム処理後のサウンドデータ、及び Voice 1,
Voice 3 のエンベロープ処理後のサウンドデータをサウンドバッファの先頭
0x1000 バイト (0x800 short int) の部分にクロック (44.1 kHz) 毎にそれぞ
れ 16 bit (= 1 short int) ずつ書き込みます。個々のサウンドデータはそれ
ぞれ 0x400 バイト (0x200 short int) のバッファとなっていて、前半部分
(0x200 バイト [0x100 short int]) と後半部分 (0x200バイト[0x100 short
int]) に分かれ、現在どちらのバッファ領域に書き込まれているかを判別する
ことにより、最大100 サンプル (100 / 44100 = 0.0022 ... 秒) のデータを 
1 度に読み込むことが出来ます。

* 3 基本サウンドライブラリ関数概要

────────────────────┬───────────────
関数名					│内容
────────────────────┼───────────────
SpuInit (void)				│Spu の初期化
SpuInitHot (void)			│Spu の初期化 (ホットリセット)
SpuStart (void)				│Spu 処理の開始
SpuQuit (void)				│Spu 処理の終了
────────────────────┼───────────────
SpuSetMute (long)			│サウンドのミュートオン/オフ
SpuGetMute (void)			│サウンドのミュートの状態の診断
────────────────────┼───────────────
SpuSetIRQ (long)			│割り込みリクエストのオン/オフ
SpuGetIRQ (void)			│割り込みリクエストのオン/オフ
					│の状態の診断
SpuSetIRQAddr (unsigned long)		│割り込みリクエストのアドレスの
					│設定
SpuGetIRQAddr (void)			│割り込みリクエストのアドレスの
					│診断
SpuSetIRQCallback (SpuIRQCallbackProc)	│割り込みリクエスト時のCallback
					│関数の設定
────────────────────┼───────────────
SpuSetVoiceAttr (SpuVoiceAttr *)	│各ボイスの属性の設定
SpuGetVoiceAttr (SpuVoiceAttr *)	│各ボイスの属性の診断
SpuRSetVoiceAttr (long, long,		│指定した範囲の各ボイスの属性を
		  SpuVoiceAttr *)	│設定
SpuSetKey (long, unsigned long)		│各ボイスに対するキーオン/キー
					│オフの設定
SpuSetKeyOnWithAttr (SpuVoiceAttr *)	│各ボイスに対するキーオンを属性
					│付きで設定
SpuGetKeyStatus (unsigned long)		│指定したボイスに対してキー
					│オン/キーオフを診断
SpuGetAllKeysStatus (char *)		│全てのボイスに対してキーオン/
					│キーオフを診断
SpuRGetAllKeysStatus (long, long,	│指定した範囲のボイスに対して
		      char *)		│キーオン/キーオフを診断
────────────────────┼───────────────
SpuWrite (unsigned char *,		│メインメモリからサウンドバッ
	  unsigned long)		│ファへの転送
SpuWrite0 (unsigned long)		│サウンドバッファのクリア
SpuWritePartly (unsigned char *,	│メインメモリからサウンドバッ
		unsigned long)		│ファへの転送(部分的に分割した
					│転送を想定)
SpuRead (unsigned char *,		│サウンドバッファからメインメモ
	 unsigned long)			│リへの転送
SpuSetTransferStartAddr (unsigned long)	│サウンドバッファの転送先/転送元
					│先頭アドレスの設定
SpuGetTransferStartAddr (void)		│サウンドバッファの転送先/転送元
					│先頭アドレスの診断
SpuSetTransferMode (long)		│サウンドバッファへの転送モードの
					│設定
SpuGetTransferMode (void)		│サウンドバッファへの転送モードの
					│診断
SpuIsTransferCompleted (long)		│サウンドバッファへの転送終了の
					│診断
SpuSetTransferCallback (		│DMA 転送終了時の Callback
	SpuTransferCallbackProc)	│関数の設定
────────────────────┼────────────────
SpuReadDecodeData (SpuDecodeData *,	│SPU がデコードしたサウンドデー
		   long)		│タのサウンドバッファからメイン
					│メモリへの転送
────────────────────┼────────────────
SpuSetNoiseVoice (long, unsigned long)	│各ボイスに対してノイズ音源の
					│オン/オフの設定
SpuGetNoiseVoice (void)			│各ボイスに対するノイズ音源の
					│オン/オフの診断
SpuSetNoiseClock (long)			│ノイズ音源のクロックの設定
SpuGetNoiseClock (void)			│ノイズ音源のクロックの診断
────────────────────┼────────────────
SpuSetPitchLFOVoice (long,		│各ボイスに対するピッチ LFO の
		     unsigned long)	│オン/オフの設定
SpuGetPitchLFOVoice (void)		│各ボイスに対するピッチ LFO の
					│オン/オフの診断
────────────────────┼────────────────
SpuSetReverb (long)			│リバーブのオン/オフの設定
SpuGetReverb (void)			│リバーブのオン/オフの診断
SpuSetReverbModeParam (SpuReverbAttr *)	│リバーブのモード、及びパラメー
					│タの設定
SpuGetReverbModeParam (SpuReverbAttr *)	│リバーブのモード、及びパラメー
					│タの診断
SpuSetReverbDepth (SpuReverbAttr *)	│リバーブの深さパラメータの設定
SpuSetReverbVoice (long, unsigned long)	│各ボイスに対してリバーブのオン/
					│オフの設定
SpuGetReverbVoice (void)		│各ボイスに対するリバーブのオン/
					│オフの診断
SpuReserveReverbWorkArea (long)		│リバーブワークエリアの予約/解放
SpuIsReverbWorkAreaReserved (long)	│リバーブワークエリアが予約されて
					│いるかチェック/リバーブワークエリ
					│アが予約できるか診断
SpuClearReverbWorkArea (long)		│リバーブワークエリアのクリア
────────────────────┼────────────────
SpuSetCommonAttr (SpuCommonAttr *)	│(変更要求が頻繁に起きない)
					│全ボイス共通属性の設定
SpuGetCommonAttr (SpuCommonAttr *)	│(変更要求が頻繁に起きない)
					│全ボイス共通属性の診断
────────────────────┼────────────────
SpuInitMalloc (long, char *)		│サウンドバッファメモリ管理機構
					│の初期化
SpuMalloc (long)			│サウンドバッファ内の領域の確保
SpuMallocWithStartAddr (unsigned long,	│サウンドバッファ内の指定した
			long)		│アドレスからの領域の確保
SpuFree (unsigned long)			│サウンドバッファ内に確保されて
					│いる領域の解放
────────────────────┴────────────────
