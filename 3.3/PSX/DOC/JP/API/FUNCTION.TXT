$PSDocId: Document Version 1.0 for Runtime Library Version 3.3$
*カーネルライブラリ

**関数詳細

-----------------------------------------------------------------------------
SetRCnt		ルートカウンタの設定

	形式	long SetRCnt( spec, target, mode )
		unsigned long spec;
		unsigned short target;
		long mode;

	引数	spec		ルートカウンタ指定
		target		ターゲット値
		long mode	モード
		
	解説	ルートカウンタをspecにターゲット値targetとモードmodeを設定す
		る。
				
	返り値	成功すると1を、失敗すると0を返す。

	備考	関連項目：GetRCnt(), StartRCnt(), StopRCnt(), ResetRCnt()

-----------------------------------------------------------------------------
GetRCnt		ルートカウンタの取得

	形式	long GetRCnt( spec )
		unsigned long spec;

	引数	spec		ルートカウンタ指定

	解説	ルートカウンタspecの現行値を返す。

	返り値	成功すると32ビットに符号なし拡張したカウンタ値を、失敗すると-1
		を返す。

	備考	関連項目：SetRCnt(), StartRCnt(), StopRCnt(), ResetRCnt()

-----------------------------------------------------------------------------
StartRCnt	ルートカウンタの起動

	形式	long　StartRCnt( spec )
		unsigned long spec;

	引数	spec		ルートカウンタ指定

	解説	ルートカウンタspecを起動する。割り込み許可を行う。
		specが0の場合はデフォルト設定ですべてのルートカウンタを初期化
		し割り込みを許可する。

	返り値	成功すると1を、失敗すると0を返す。

	備考	関連項目：GetRCnt(), SetRCnt(), StopRCnt(), ResetRCnt()

-----------------------------------------------------------------------------
StopRCnt	ルートカウンタの停止

	形式	long StopRCnt( spec )
		unsigned long spec;

	引数	spec	ルートカウンタ指定

	解説	ルートカウンタspecを停止する。

	返り値	成功すると1を、失敗すると0を返す。

	備考	関連項目：GetRCnt(), SetRCnt(), StartRCnt(), ResetRCnt()

-----------------------------------------------------------------------------
ResetRCnt	ルートカウンタのリセット

	形式	long ResetRCnt( spec )
		unsigned long spec;

	引数	spec		ルートカウンタ指定

	解説	ルートカウンタspecをリセットする。

	返り値	成功すると1を、失敗すると0を返す。

	備考	関連項目：GetRCnt(), SetRCnt(), StartRCnt(), StopRCnt()

-----------------------------------------------------------------------------
OpenEvent	イベントのオープン

	形式	unsigned long OpenEvent( desc, spec, mode, func )
		unsigned long desc;
		long spec;
		long mode;
		long *func();

	引数	desc		原因ディスクリプタ
		spec		イベント種別
		mode		モード
		func		ハンドラ関数へのポインタ

	機能	ディスクリプタdesc、イベント種別specのイベントのためのイベント
		管理ブロックを確保する。
		注意：クリティカルセクションで実行すること。

	返り値	成功するとイベントディスクリプタを、失敗すると-1を返す。

	備考	関連項目：EvCB構造体、CloseEvent(), DeliverEvent()

-----------------------------------------------------------------------------
CloseEvent	イベントのクローズ

	形式	long CloseEvent( event )
		unsigned long event;

	引数	event		イベントディスクリプタ

	解説	eventで指定するイベント管理ブロックを解放する。
		注意：クリティカルセクションで実行すること。

	返り値	成功すると1を、失敗すると0を返す。

	備考	関連項目：OpenEvent()

-----------------------------------------------------------------------------
WaitEvent	イベントの発生を待つ

	形式	long WaitEvent( event )
		unsigned long event;

	引数	event		イベントディスクリプタ

	解説	ディスクリプタeventが指定するイベントが発生するまで待ち、未発
		生状態に再初期化してから戻る。

	返り値	正常終了すると1を、以外は0を返す。

	備考	関連項目：TestEvent()

-----------------------------------------------------------------------------
TestEvent	イベントのテスト

	形式	long TestEvent( event )
		unsigned long event;

	引数	event		イベントディスクリプタ

	解説	ディスクリプタeventが指定するイベントが発生済みかどうかを調べ
		る。発生済みの場合は未発生状態に再初期化を行う。

	返り値	イベントが発生していれば1、以外は0を返す。

	備考	関連項目：WaitEvent(), EnableEvent(), DeliverEvent()

-----------------------------------------------------------------------------
EnableEvent	イベントの発生を許可

	形式	long EnableEvent( event )
		unsigned long event;

	引数	event		イベントディスクリプタ

	解説	ディスクリプタeventが指定するイベントの発生を許可する。

	返り値	成功すれば1、以外は0を返す。

	備考	関連項目：TestEvent(), DisableEvent()

-----------------------------------------------------------------------------
DisableEvent	イベントの発生を禁止

	形式	long DisableEvent( event )
		unsigned long event;

	引数	event		イベントディスクリプタ

	解説	ディスクリプタeventが指定するイベントの発生を禁止する。
		禁止中のイベント発生は無視される。

	返り値	成功すれば1、以外は0を返す。

	備考	関連項目：EnableEvent()

-----------------------------------------------------------------------------
DeliverEvent	イベントを発行

	形式	void DeliverEvent( ev1, ev2 )
		unsigned long ev1;
		unsigned long ev2;

	引数	ev1	原因ディスクリプタ
		ev2	イベント種別

	解説	イベントを発行する。

	返り値	なし

	備考	クリティカルセクションで実行すること。

		関連項目：OpenEvent(), TestEvent(), UnDeliverEvent()

-----------------------------------------------------------------------------
UnDeliverEvent	イベントを取り消す

	形式	void UnDeliverEvent( ev1, ev2 )
		unsigned long ev1;
		unsigned long ev2;

	引数	ev1	原因ディスクリプタ
		ev2	イベント種別

	解説	イベントを取り消す。

	返り値	なし

	備考	クリティカルセクションで実行すること。

		関連項目：DeliverEvent()

-----------------------------------------------------------------------------
OpenTh		スレッドのオープン

	形式	unsigned long OpenTh( func, sp, gp )
		long *func();
		unsigned long sp;
		unsigned long gp;

	引数	func		実行開始関数へのポインタ
		sp		スタックポインタ値
		gp		グローバルポインタ値

	解説	TCBを確保し引き数で初期化する。これはChangeTh()で実行できる。

	返り値	確保し成功するとディスクリプタを、それ以外は-1を返す。

	備考	クリティカルセクションで実行すること。

		関連項目：TCB構造体、CloseTh()

-----------------------------------------------------------------------------
CloseTh		スレッドのクローズ

	形式	CloseTh( thread ) 
		unsigned long thread;

	引数	thread		スレッドディスクリプタ

	解説	スレッドthreadをクローズしTCBを解放する。

	返り値	成功すると1を、以外は0を返す。

	備考	クリティカルセクションで実行すること。

		関連項目：OpenTh()

-----------------------------------------------------------------------------
ChangeTh	実行図レッドの変更

	形式	ChangeTh( thread )
		unsigned long thread;

	引数	thread			スレッドディスクリプタ

	解説	スレッドthreadに実行を移す。現行スレッドはこの関数を実行中の状
		態でTCBに待避される。実行が再開されるとこの関数から返って来る。

	返り値	成功し再実行されると1を、それ以外は0を返す。
		再実行時の返り値は他スレッドにより変更される可能性がある。

	備考	関連項目：TCBH構造体、TCB構造体、OpenTh()

-----------------------------------------------------------------------------
open		ファイルのオープン

	形式	unsigned long open( devname, flag )
		char *devname;
		unsigned long flag;

	引数	devname			ファイル名
		flag			オープンモード

	解説	低水準入出力の為にデバイスをオープンして、そのディスクリプタを
		返す。flag は、デバイスに依存する。共通部分を以下に示す。

       =========================================================
	マクロ		オープンモード
       ---------------------------------------------------------
	O_RDONLY	読み出し専用
	O_WRONLY	書き込み専用
	O_RDWR		読み書き兼用
	O_CREAT		ファイル新規生成
	O_NOBUF		非バッファモード
	O_NBLOCK	非同期モード
       ---------------------------------------------------------

	返り値	成功するとファイルディスクリプタを、以外は-1を返す。

	備考	関連項目：close()

-----------------------------------------------------------------------------
close		ファイルのクローズ

	形式	long close( fd )
		unsigned long fd;

	引数	fd		ファイルディスクリプタ

	解説	ファイルディスクリプタを解放する。

	返り値	成功するとfdを、それ以外は-1を返す。

	備考	関連項目：open()

-----------------------------------------------------------------------------
ioctl		デバイスの制御

	形式	long ioctl( fd, com, arg )
		unsigned long fd;
		long com;
		long arg;

	引数	fd	ファイルディスクリプタ
		com	制御コマンド
		arg	制御コマンド引数

	解説	デバイスに各種制御コマンドを発行する。コマンドとその引数につい
		ての詳細はデバイス毎に規定する。

	返り値	成功すると0を、それ以外は-1を返す。

	備考	関連項目：open()

-----------------------------------------------------------------------------
lseek		ファイルポインタの移動

	形式	long lseek( fd, off, flag )
		unsigned long fd;
		long offset;
		long flag;

	引数	fd		ファイルディスクリプタ
		offset		オフセット
		flag		解説を参照

	機能	fd で指定したディスクリプタしめすデバイスのファイルポインタを
		移動する。offset は移動バイト数。flag の値によって移動開始点が
		変わる。ただしキャラクタ型ドライバには適用できない。
		flagに指定できるマクロは次の通り。

		       =================================
			flagマクロ	動作
		       ---------------------------------
			SEEK_SET	ファイルの先頭
			SEEK_CUR	現在位置
		       ---------------------------------
	
	返り値	成功すると現在のファイルポインタを、それ以外は-1を返す。

	備考	関連項目：open(), read(), write()

-----------------------------------------------------------------------------
read		ファイルからデータを読み込む

	形式	long read( fd, buf, n )
		unsigned long fd;
		void *buf;
		long n;

	引数	fd		ファイルディスクリプタ
		buf		読み込みバッファアドレス
		n		読み込みバイト数

	解説	fd で指定するディスクリプタから n バイトを buf 指定する領域へ
		読み込む。

	返り値	正常終了時には実際に領域に読み込まれたバイト数を、それ以外は-1
		を返す。

	備考	関連項目：open()

-----------------------------------------------------------------------------
write		ファイルにデータを書き込む

	形式	long write( fd, buf, n )
		unsigned long fd;
		void *buf;
		long n;

	引数	fd		ファイルディスクプリタ
		buf		書き込みデータアドレス
		n		書き込みバイト数
		
	機能	fd で指定するディスクリプタから n バイトを buf 指定する領域へ
		書き込む。

	返り値	正常終了時には実際に領域に書き込まれたバイト数を、それ以外は-1
		を返す。

	備考	関連項目：open()

-----------------------------------------------------------------------------
firstfile	最初のファイルの検索

	形式	struct DIRENTRY *firstfile( name, dir )
		char *name;
		struct DIRENTRY *dir;

	引数	name	ファイル名
		dir	検索できたファイルに関する情報を格納するバッファ

	解説	ファイル名パターンnameに該当するファイルを検索し、それに関する
		情報をdirに格納する。

	返り値	成功するとdirを、それ以外は0を返す。

	備考	ファイル名パターンにはワイルドカード文字として?（任意の1文字）
		*（任意長のすべての文字列）を使うことができる。*以降の文字指定
		は無視される。

		関連項目：DIRENTRY構造体、nextfile()

-----------------------------------------------------------------------------
nextfile	次のファイルの検索

	形式	struct DIRENTRY *firstfile( dir )
		struct DIRENTRY *dir;

	引数	dir	検索できたファイルに関する情報を格納するバッファ

	解説	直前に実行したfirstfile()関数と同じ条件の検索を継続する形で行
		なう。該当するファイルが見つかると、それに関する情報をdirに格
		納する。

	返り値	成功するとdirを、それ以外は0を返す。

	備考	直前のfirstfile()以降、CD-ROMドライブのシェルカバーが一旦開け
		られている実行に失敗し、ファイルが見つからないとレポートする。

		関連項目：DIRENTRY構造体、firstfile()

-----------------------------------------------------------------------------
delete		ファイルを削除

	形式	long delete( name )
		char *name;

	引数	name	ファイル名

	解説	ファイルnameを削除する。

	返り値	成功すると1を、それ以外は0を返す。

	備考	関連項目：undelete()

-----------------------------------------------------------------------------
undelete	ファイルを復活

	形式	long undelete( name )
		char *name;

	引数	name	ファイル名

	解説	一旦削除したファイルnameを復活する。

	返り値	成功すると1を、それ以外は0を返す。

	備考	関連項目：delete()

-----------------------------------------------------------------------------
format		ファイルシステムを初期化

	形式	long format( fs )
		char *fs;

	引数	fs	ファイルシステム名

	解説	ファイルシステムfsを初期化する。

	返り値	成功すると1を、それ以外は0を返す。

	備考	書き込み可能なファイルシステムについてのみ有効。

-----------------------------------------------------------------------------
rename		ファイルの名称変更

	形式	long rename( src, dest )
		char *src;
		char *dest;

	引数	src	元ファイル名
		dest	新ファイル名

	解説	ファイル名をsrcからdestに変更する。src、destともにデバイス名
		からのフルパスを指定する。

	返り値	成功すると1を、それ以外は0を返す。

	備考	書き込み可能なファイルシステムについてのみ有効。

-----------------------------------------------------------------------------
cd		デフォルトディレクトリ変更

	形式	long cd( path )
		char *path;

	引数	path	デフォルトディレクトリパス

	解説	ファイルシステムについてデフォルトのディレクトリパスを変更す
		る。ファイルシステムはpath先頭部分のデバイス名で指定する。

	返り値	成功すると1を、それ以外は0を返す。

-----------------------------------------------------------------------------
LoadTest	ロードテストの実行

	形式	long LoadTest( name, exec )
		char *name;
		struct EXEC *exec;

	引数	name		ファイル名
		exec		実行ファイル情報

	解説	PS-X EXE形式のファイルnameの内部情報をexecに書き込む。

	返り値	成功すると実行開始アドレスを、失敗すると0を返す。

	備考	関連項目：EXEC構造体、Load()

-----------------------------------------------------------------------------
Load		実行ファイルのロード

	形式	long Load( name, exec )
		char *name;
		struct EXEC *exec;

	引数	name		ファイル名
		exec		実行ファイル情報

	解説	PS-X EXE形式のファイルnameをその内部ヘッダが指定するアドレス
		に読み込み、 execに内部情報を書き込む。

	返り値	成功すると1を、失敗すると0を返す。

	備考	関連項目：EXEC構造体、Exec()

-----------------------------------------------------------------------------
Exec		実行ファイルの実行

	形式	long Exec( exec, argc, argv )
		struct EXEC *exec;
		long argc;
		char *argv[];

	引数	exec		実行ファイル情報
		argc		引数の数 
		argv		引数

	解説	execの指定する実行ファイル情報に従ってメモリ上にロード済みのモ
		ジュールを実行する。
		exec->s_addrが0の場合、スタックおよびフレームポインタを設定し
		ない。
		動作内容は以下の通り。
		(1)初期値なしデータセッションをゼロクリア。
		(2)sp,fp,gpを退避後、初期化。（fpはspと等しい値とする。）
		(3)main()の引数を設定。（a0,a1レジスタにて。）
		(4)実行開始アドレスをコール。
		(5)リタン後、sp,fp,gpを復帰。

	返り値	成功すると1を、失敗すると0を返す。

	備考	クリティカルセクションで実行すること。
		
		関連項目：EXEC構造体、Load()

-----------------------------------------------------------------------------
LoadExec        実行ファイルのロードと実行

        形式    void LoadExec( *name, s_addr, s_size )
		char *name;
		unsigned long s_addr;
		unsigned long s_size;

        引数    name    PS-X EXE形式実行ファイル名（19文字以内）
                s_addr  スタック領域先頭アドレス
                s_size  スタック領域バイト数

        解説    内部でLoad()とExec()を呼びだし、ファイルnameをメモリ上に読み込
                み、それを実行する。s_addrとs_sizeはExec()に引き渡されるEXEC構
                造体に設定される。
                正常に実行されると返らない。

        返り値  なし。

        備考    関連項目：EXEC構造体、Load()、Exec()

-----------------------------------------------------------------------------
InitPAD		コントローラの初期化

	形式	void InqPAD(bufA, lenA, bufB, lenB )
		char *bufA, *bugB;
		long  lenA, lenB;

	引数	bufA, bufB	受信データバッファ
		lenA, lenB	受信データバッファ長（バイト単位）

	解説	コントローラの受信データバッファを登録する。受信データの形式
		についてはabstruct.txtに示す。内部でChnageClearPAD()は実行しな
		い。

	返り値	なし。

	備考	関連項目：StartPAD(), StopPAD(), ChangeClearPAD()

-----------------------------------------------------------------------------
StartPAD	コントローラの読みとりを開始

	形式	long StartPAD( void )
		

	引数	なし

	解説	垂直帰線区間割り込みをトリガとして行なわれるコントローラの読み
		とりを開始する。
		内部でChangeClearPAD(1)を実行する。
	
	返り値	成功すると1を、失敗すると0を返す。

	備考	割り込みを許可した状態で返る。

		関連項目：InitPAD(), ChangeClearPAD()

-----------------------------------------------------------------------------
StopPAD		コントローラの読みとりを停止

	形式	void StopPAD( void )
		

	引数	なし

	解説	コントローラの読みとりを停止する。割り込みは禁止しない。
		内部でChangeClearPAD(1)を実行する。
	
	返り値	なし

	備考	関連項目：InitPAD(), ChangeClearPAD()

-----------------------------------------------------------------------------
InitHeap	ヒープ領域の初期化

	形式	void InitHeap( head, size )
		void *head;
		long size;

	引数	head		ヒープ先頭アドレス
		size		ヒープサイズ（4の倍数、バイト単位）

	解説	標準関数ライブラリ中のメモリ管理関数群を初期化する。
		以降、malloc()などが使用可能となる。
		ただし、オーバヘッドがあるのでsizeバイトすべてが利用可能とは
		ならない。

	返り値	なし

	備考	クリティカルセクションで実行すること。
		多重に実行するとそれまで保持していたメモリ管理情報が失われる。

		関連項目：malloc()

-----------------------------------------------------------------------------
FlushCache	Iキャッシュのフラッシュ

	形式	void FlushCache( void )
		

	引数	なし

	解説	Iキャッシュをフラッシュする。
		プログラムコードをメモリに書き込んだ場合に実行する。

	返り値	なし

	備考	クリティカルセクションで実行すること。
		メモリの内容を変化させることはない。

-----------------------------------------------------------------------------
ReturnFromException	割り込みから復帰

	形式	void  ReturnFromException( void )
		

	引数	なし
	
	解説	割り込み処理から復帰する。イベントハンドラまたはコールバック関
		数中で使用する。

	返り値	正常に実行されると返らない。

-----------------------------------------------------------------------------
EnterCriticalSection	クリティカルセクションに入る

	形式	void EnterCriticalSection( void )
		

	引数	なし

	解説	割り込みを停止し、クリティカルセクションに入る。
		カーネル起動直後はこの状態にある。

	返り値	なし

	備考	内部でシステムコール命令を実行し、割り込みコンテキストを破壊す
		る。

		関連項目：ExitCriticalSection(), TCBH構造体、TCB構造体

-----------------------------------------------------------------------------
ExitCriticalSection	クリティカルセクションから脱出

	形式	void ExitCriticalSection( void )
		

	引数	なし

	解説	割り込みの発生を許可し、クリティカルセクションから出る。

	返り値	なし

	備考	内部でシステムコール命令を実行し、割り込みコンテキストを破壊す
		る。

		関連項目：EnterCriticalSection(), TCBH構造体、TCB構造体

-----------------------------------------------------------------------------
Exception	割り込みの発生

	形式	void Exception( void )
		

	引数	なし

	解説	割り込みを発生する。最新コンテキストを実行TCBに格納する。
		クリティカルセクションでも有効。
	
	返り値	なし

	備考	内部でシステムコール命令を実行し、割り込みコンテキストを破壊す
		る。

		関連項目：TCBH構造体、TCB構造体、ChnageTh()

-----------------------------------------------------------------------------
SetSp	spレジスタ（スタックポインタ）値の設定

	形式	unsigned long SetSp( new_sp ) 
		unsigned long new_sp;

	引数	new_sp		spレジスタに設定する値

	解説	spレジスタにnew_spを設定する。

	返り値	変更前のspレジスタの値を返す。

	備考	関連項目：EXEC構造体、OpenTh(), Load(), Exec()

-----------------------------------------------------------------------------
SetConf カーネルコンフィギュレーションの変更

        形式    void SetConf( ev, tcb, sp )
		unsigned long ev;
		unsigned long tcb;
		unsigned long sp;
		
        引数    ev      イベント管理ブロック要素数
                tcb     タスク管理ブロック要素数
                sp      スタックポインタ初期値

        解説    システムコンフィギュレーションパラメータを変更し、カーネルを再
                構成する。
                イベント管理ブロックとタスク管理ブロックの内容はすべて破壊され
                る。カーネルへのパッチもすべて無効となる。

        返り値  なし。

	備考	関連項目：SetContf()

-----------------------------------------------------------------------------
GetConf カーネルコンフィギュレーションの取得

        形式    void GetConf( ev, tcb, sp )
		unsigned long *ev;
		unsigned long *tcb;
		unsigned long *sp;

        引数    ev      イベント管理ブロック要素数を格納するアドレス
                tcb     タスク管理ブロック要素数を格納するアドレス
                sp      スタックポインタ初期値を格納するアドレス

        解説    システムコンフィギュレーションパラメータを引数として与えられた
                ポインタが示すアドレスに格納する。

        返り値  なし。

	備考	関連項目：SetContf()

-----------------------------------------------------------------------------
_get_errno      直近の入出力エラーコードの取得

        形式    long _get_erno( void )

        引数    なし

        解説    すべてのファイルディスクリプタを通じて直近ののエラーのコードを
                取得する。
                エラーコードはsys/errno.hに定義されている。

        返り値  エラーコード。

-----------------------------------------------------------------------------
_get_error      ファイルディスクリプタのエラーコードの取得

        形式    long _get_error( u_long fd )

        引数    fd      ファイルディスクリプタ

        解説    指定したファイルディスクリプタについて直近に起こったエラーの
                コードを返す。
                エラーコードはsys/errno.hに定義されている。

        返り値  エラーコード。

-----------------------------------------------------------------------------
SystemError     システムエラー画面の表示

        形式    void SystemError( char c, long n )

        引数    c       エラー識別文字（英文字のみ）
                n       エラー識別コード（0〜999）

        解説    画面表示によりシステムエラー発生をオペレータに通報する。
                ゲーム実機ではexit()の内部でコールする。
		成功すると返らない。

        返り値  なし

-----------------------------------------------------------------------------
SetMem          有効メモリサイズの変更

        形式    void SetMem( long n )

        引数    n       有効メモリ容量（メガバイト単位）

        解説    有効メモリ容量を引数で指定した値に変更する。
                nは2（2Mバイト）および8（8Mバイト）のみ指定可能。これら以外の
		値は無視される。

        返り値  なし。

	備考	有効範囲外のメモリアクセスは、物理メモリの実装とは無関係にCPU例
                外を発生する。

-----------------------------------------------------------------------------
Krom2RawAdd     漢字フォントパタンアドレスの取得

        形式    unsigned long Krom2RawAdd( sjiscode )
		unsigned sjiscode;

        引数    sjiscode        シフトJISコード

        解説    sjiscodeが指定する漢字に対応するフォントパタンのカーネル中の先
                頭アドレスを取得する。

        返り値  漢字フォントパタンの先頭アドレスを返す。
                指定された漢字に対応するフォントデータが用意されていない場合は
                -1を返す。

-----------------------------------------------------------------------------
GetGp           gpレジスタ値の取得

        形式    unsigned long GetGp( void )

        引数    なし。

        解説    gpレジスタの値を取得する。

        返り値  現行のgpレジスタの値を返す。

        備考    関連項目：EXEC構造体、OpenTh()、Load()、Exec()

-----------------------------------------------------------------------------
GetSp           spレジスタ値の取得

        形式    unsigned long GetSp( void )

        引数    なし。

        解説    spレジスタの値を取得する。

        返り値  現行のspレジスタの値を返す。

        備考    関連項目：EXEC構造体、OpenTh()、Load()、Exec()

-----------------------------------------------------------------------------
GetCr           原因レジスタ値の取得

        形式    unsigned long GetCr( void )

        引数    なし。

        解説    制御レジスタのひとつである原因レジスタの値を取得する。

        返り値  現行の原因レジスタの値を返す。各ビットに意味は次のとおり。

	      =========================================================
		ビット		内容
	       -------------------------------------------------------
		31-6		システム予約
		5-2		例外コード
					0000:外部割り込み
					0001:未使用
					0010:同上
					0011:同上
					0100:アドレスリードエラー
					0101:アドレスライトエラー
					0110:命令バスエラー
					0111:データバスエラー
					1000:システムコール
					1001:ブレークポイント
					1010:未定義命令
					1011:未装着コプロセッサ
					1100:オーバフロー
		1-0		システム予約
	       -------------------------------------------------------

        備考    関連項目：OpenTh()

-----------------------------------------------------------------------------
GetSr           ステータスレジスタ値の取得

        形式    unsigned long GetSr( void )

        引数    なし。

        解説    制御レジスタのひとつであるステータスレジスタの値を取得する。

        返り値  現行のステータスレジスタの値を返す。各ビットに意味は次のとお
		り。

	      =========================================================
		ビット		内容
	       -------------------------------------------------------
		31-28		コプロセッサ装着フラグ（1:装着）
				ビット29がGTE
		27-11		システム予約
		10		常に1
		9-3		システム予約
		2		メインフロー割り込み許可（1:許可）
		1		システム予約
		0		割り込み許可（1:許可）
	       -------------------------------------------------------

        備考    関連項目：OpenTh()

-------------------------------------------------------------------------------
_96_init	ISO-9660ファイルシステムの組み込み

	形式	void _96_init(void)

	引数	なし

	解説	CD-ROMへのアクセスを管理するISO-9660ファイルシステムドライバを
		カーネルに組み込む。

	返り値	なし

	備考	関連項目：_96_remove()

-------------------------------------------------------------------------------
_96_remove	ISO-9660ファイルシステムの切り離し

	形式	void _96_remote(void)

	引数	なし

	解説	CD-ROMへのアクセスを管理するISO-9660ファイルシステムドライバを
		カーネルから切り離す。

	返り値	なし

	備考	関連項目：_96_init()

-------------------------------------------------------------------------------
_boot		リブート

	形式	void _boot(void)	

	引数	なし

	解説	システムをリブートする。
		デモンストレーションプログラム開発のためのインタフェースです。
		通常のタイトルアプリケーションでは使用しないでください。

	返り値	なし

-------------------------------------------------------------------------------
SwEnterCriticalSection	割り込みの禁止

	形式	void SwEnterCriticalSection(void)

	引数	なし

	解説	割り込みを禁止する。内部でシステムコール割り込みを発生しないの
		で、イベントハンドル関数やコールバック関数中で呼び出すことがで
		きる。クリティカルセクションで実行すること。

	返り値	なし

	備考	関連項目：EnterCriticalSection()、SwExitCriticalSection()

-------------------------------------------------------------------------------
SwExitCriticalSection	割り込みの許可

	形式	void SwExitCriticalSection(void)

	引数	なし

	解説	割り込みを許可する。内部でシステムコール割り込みを発生しないの
		で、イベントハンドル関数やコールバック関数中で呼び出すことがで
		きる。クリティカルセクションで実行すること。

	返り値	なし

	備考	関連項目：ExitCriticalSection()、SwEnterCriticalSection()

-------------------------------------------------------------------------------
GetSysSp	システムスタックの取得

	形式	long	GetSysSp( void )

	引数	なし

	解説	イベントハンドラ関数実行のためのスタックである「システムスタッ
		ク」領域の最高位アドレスを取得する。このスタック領域のサイズは
		2Kバイト。

	返り値	「システムスタック」領域の最高位アドレス。

-------------------------------------------------------------------------------
ChangeClearPAD	コントロールドライバの設定

	形式	void ChnageClearPAD( val )
		long val;

	引数	val	垂直帰線割り込みクリアフラグ

	解説	垂直帰線割り込みで起動されるコントローラドライバの中で割り込み
		処理を完了するか、完了せずにより低い優先度の割り込みモジュール
		に処理を許すかを設定する。valが1の場合は前者、0の場合は後者の
		設定となる。

	返り値	なし

	備考	関連項目：StartPAD(), StopPAD(), StartCARD(), StopCARD()

-------------------------------------------------------------------------------

									以上







