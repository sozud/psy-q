$PSDocId: Document Version 1.0 for Runtime Library Version 3.3$
TOD foramt Version 1.0				Document Ver. 1.0


アニメーション データ仕様 (TODフォーマット)

				Mar/20/1995
				Sony Computer Entertainment Inc.



1. 概要
-------
 アニメーション・ファイル (TOD フォーマット) は、3D オブジェクトに関す
る情報を時間の流れに沿ってセットするためのもので、グラフィクス拡張ライ
ブラリ"libgs" に対応しています。具体的には、3D アニメーション(連続した
フレームと考える) における各フレームについて、生成、変化、あるいは、消
滅させる3D オブジェクトに関する必要なデータをそれぞれ記述し、それらの
各フレームのデータを時間の流れに沿って並べたものです。

この解説書ではTODフォーマットのバージョン1.0について記述しています。


2. 全体構成
-----------
 TODファイルはバイナリ形式で32bit単位（1word）で区切られています。
先頭には 2 ワード (64bit) のfile headerがあります。file header に
は次の情報が記述されます。


 ・file ID (8bit) : 0x50
	…TODデータファイルであることを示すID

 ・version (8bit) : TOD Version 1.0では0x00
	…アニメーションのバージョン

 ・resolution (16bit)
	…1フレームが表示されている時間 (単位tick = 1/60 sec)

 ・number of frames (32bit)
	…ファイルに記述されているフレームの数


 file header の後にフレームデータが続きます。各フレームデータは時系列
に従って並びます。


        MSB                                  LSB
        bit31                                bit0
        ┌────────┬────┬────┐ ┐
        │   resolutin    │ version│ file ID│ │
        ├────────┴────┴────┤ ├─> file header
        │         number of frames           │ │
        ├──────────────────┤ ┘
        │                                    │
        │                                    │
        │              Frame 1               │
        │                                    │
        │                                    │
        ├──────────────────┤
        │                                    │
        │              Frame 2               │
        │                                    │
        ├──────────────────┤
        │                                    │
        │              Frame 3               │
        │                                    │
        ├──────────────────┤
        │                :                   │
        │                :                   │
        │                                    │
        └──────────────────┘
		図１: animation file format


3. フレーム
-----------
 時系列に並べられる各フレームそれぞれにおけるデータの構成は、図2 の
ようになります。

  各フレームの先頭には、2 ワードの frame header があります。この frame
header には、

	・frame size (16bit)
		… フレームデータのサイズで単位はワード(4Byte) です。
		   frame headerを含みます。

	・number of packets (16bit)
		…  packetの個数

	・frame number (32bit)
		…フレーム番号

といった情報が記述されます。

  そして、frame header の後にpacketが続きます。各packetは、先頭に
１ワードのpacket header とそれに続くpacket data とからなり(図3 参照)、
様々な種類のものがあります。 それぞれのpacket data のサイズは、パケッ
トが異種の場合はもちろん、同種の場合でも同じであるとは限りません。


        MSB                                  LSB
        bit31                                bit0
        ┌─────────┬────────┐ ┐          ┐
        │ number of packets│   frame size   │ │          │
        ├─────────┴────────┤ ├> frame   │
        │            frame  number           │ │    header│
        ├──────────────────┤ ┤          │
        │            packet header           │ │          │
        ├──────────────────┤ │          │
        │                                    │ ├> 1 packet│
        │            packet data             │ │          │
        │                                    │ │          │
        ├──────────────────┤ ┘          │
        │                ・                  │             ├> 1 frame
        │                                    │             │
        │                ・                  │             │
        │                                    │             │
        │                ・                  │             │
        │                                    │             │
        │                ・                  │             │
        │                                    │             │
        ├──────────────────┤             │
        │            packet header           │             │
        ├──────────────────┤             │
        │                                    │             │
        │            packet data             │             │
        │                                    │             │
        └──────────────────┘             ┘
		図２: frame format


4. packet
-----------
  各packetの構成は、図3 のようになります。

    MSB                                                    LSB
    bit31                                                  bit0
    ┌──────┬───┬───┬────────────┐ ┐         
    │ packet     │ flag │packet│      object  ID        │ ├> packet
    │     length │      │ type │                        │ │   header
    ├──────┴───┴───┴────────────┤ ┘
    │                                                      │            
    │                                                      │            
    │                    packet data                       │
    │                                                      │            
    │                                                      │            
    └───────────────────────────┘             
			 図3: packet format

 packet headerには、次のような情報が記述されます。 

	・packet type (4bit)
		…packetデータのタイプ
			0000 …Attribute
			0001 …Coordinate(RST)
			0010 …TMD データID
			0011 …親オブジェクトID
			0100 …MATRIX 値
			0101 …TMD データ本体
			0110 …光源
			0111 …カメラ
			1000 …オブジェクト制御
			1001〜1101 …user defined
			1110 …reserved
			1111 …特殊コマンド

	 ・flag (4bit)
		…補助情報。各packet type毎に意味が異なる

	・packet length (8bit)
		…packet headerを含めたpacketの大きさで、
		  単位はワード(4Byte)

	・object ID (16bit)
		…操作対象となるオブジェクトのID番号

ここでいうオブジェクトとは、libgs で扱う3Dオブジェクト(GsDOBJ系構造体) 
のことで、packetデータを反映させる対象となるオブジェクトを示します。 
各オブジェクトには生成時にユニークなID番号が振られていなければなりませ
ん。また、オブジェクトのID番号として0および0xffffは使用できません。


4.1 packet type が Attribute (0000) の場合

 オブジェクトのattribute値の設定を行ないます。ここでいうattribute値と
はライブラリで処理する構造体のattributeメンバの値のことです。
 このpacketではflag は全く使用されません。
 packet data は、2ワードからなります(図4 参照)。

     MSB                                                      LSB
    ┌─┬─┬─┬─┬───┬─┬─┬─┬─┬─┬─┬─┬─┬─┐┐
    │31│30│29│28│・・・│ 8│ 7│ 6│ 5│ 4│ 3│ 2│ 1│ 0│├> mask
    ├─┼─┼─┼─┼───┼─┼─┼─┼─┼─┼─┼─┼─┼─┤┤
    │31│30│29│28│・・・│ 8│ 7│ 6│ 5│ 4│ 3│ 2│ 1│ 0│├> new 
    └─┴─┴─┴─┴───┴─┴─┴─┴─┴─┴─┴─┴─┴─┘┘  value
                    └─┬─┘
                     reserved

	      図4: Attribute の場合のpacket data の構成

1 ワード目は、値を変更する部分と変更しない部分を示すマスクで、変更する
項目に該当するビットには `0' をセットし、値を変更しないビットについて
は`1' をセットします。 そして、2 ワード目には、変更する項目に該当する
ビットに新しいデータを入れ、それ以外のビットについては、`0' をセットし
ます。ここで、変更の対象にはならないビットにセットするデフォルトの値が、
1 ワード目では`1'、2 ワード目では `0' というように、1 ワード目と2 ワー
ド目とで異なることに注意して下さい。

 attribute値（図4の2ワード目）のそれぞれのビットの意味は以下のようにな
ります。

	・bit0〜bit2 …material 減衰( 0〜3 )

		-  00 …material 減衰0
		-  01 …material 減衰1
		-  10 …material 減衰2
		-  11 …material 減衰3

	・bit3 …lighting mode その1

		-  0 …fog off
		-  1 …fog on

	・bit4 …lighting mode その2

		-  0 …material on
		-  1 …material off

	・bit5 …lighting mode その3

		-  0 …use lighting mode
		-  1 …use default lighting mode

	・bit6 …光源

		-  0 …光源計算なし
		-  1 …光源計算強制ON

	・bit7 …オーバーフロー時の動作

		-  0 …z overflow clip
		-  1 …z overflow not clip

	・bit8 …バック・クリップの有無

		-  0 …有効
		-  1 …無効

	・bit9〜bit27 …reserved ( 0 で初期化)

	・bit28〜bit29 …半透明レート

		-  00 …50%Back+50%Polygon
		-  01 …100%Back+100%Polygon
		-  10 …100%Back-100%Polygon
		-  01 …100%Back+25%Polygon

	・bit30 …半透明処理

		-  0 …OFF
		-  1 …ON

	・bit31 …表示制御

		-  0 …表示
		-  1 …非表示

  例えば、光源計算強制ON にする場合、packet data は、図5 のようになり
ます。 1 ワード目はbit (6) に、光源に関して変更するという意味の`0' 
を入れ、その他のビットには変更しないという意味の`1' を入れます。よって、
1 ワード目は0xffbf となります。また、2 ワード目はビット(6) に光源計算
強制ON という意味の`1' を入れ、 値を変更しないその他のビットにはデフォ
ルトの`0' を入れます。 よって、2 ワード目は0x0040 となります。


     MSB                                                      LSB
    ┌─┬─┬─┬─┬───┬─┬─┬─┬─┬─┬─┬─┬─┬─┐┐
    │ 1│ 1│ 1│ 1│・・・│ 1│ 1│ 0│ 1│ 1│ 1│ 1│ 1│ 1│├> mask
    ├─┼─┼─┼─┼───┼─┼─┼─┼─┼─┼─┼─┼─┼─┤┤
    │ 0│ 0│ 0│ 0│・・・│ 0│ 0│ 1│ 0│ 0│ 0│ 0│ 0│ 0│├> new 
    └─┴─┴─┴─┴───┴─┴─┴─┴─┴─┴─┴─┴─┴─┘┘  value

	     図5: 光源計算強制ON にする場合のpacket data


4.2 packet type が Coordinate(RST)(0001) の場合

 RST値（Rotation/Scale/Transfer)によってGsDOBJ 構造体のもつマトリクス
をセットします。演算順序はRotation→Scale、回転の演算順序はz→y→xに
なっています。

 flag は次のような意味を持ちます(図6 参照)。

    ┌──────┬──────┬──────┬──────┐
    │            │            │            │            │
    │ translation│   scaling  │  rotation  │ matrix type│ 
    │            │            │            │            │
    └──────┴──────┴──────┴──────┘

		  図6: Coordinate(RST) の場合のflag

	・matrix type …RST マトリクスのタイプ

		-  0 …絶対値
		-  1 …直前フレームからの差分マトリクス

	・rotation …回転(R) フラグ

		-  0 …無し
		-  1 …有り

	・scaling …スケーリング(S) フラグ

		-  0 …無し
		-  1 …有り

	・translation …平行移動(T) フラグ

		-  0 …無し
		-  1 …有り

  また、packet data の構成は、flag のrotation ビット、scaling ビット、
translation ビットの値によって変化します。図7 のようになります。 図7 におい

    (a)flag: 1110 または 1111        (b)flag: 0110 または 0111
    ┌───────────┐       ┌───────────┐
    │          Rx          │       │          Rx          │
    ├───────────┤       ├───────────┤
    │          Ry          │       │          Ry          │
    ├───────────┤       ├───────────┤
    │          Rz          │       │          Rz          │
    ├─────┬─────┤       ├─────┬─────┤
    │    Sy    │   Sx     │       │    Sy    │    Sx    │
    ├─────┼─────┤       ├─────┼─────┤
    │  ******  │   Sz     │       │  ******  │    Sz    │
    ├─────┴─────┤       └─────┴─────┘
    │          Tx          │
    ├───────────┤
    │          Ty          │
    ├───────────┤
    │          Tz          │
    └───────────┘

    (c)flag: 1010 または 1011        (d)flag: 1100 または 1101
    ┌───────────┐       ┌─────┬─────┐
    │          Rx          │       │    Sy    │    Sx    │
    ├───────────┤       ├─────┼─────┤
    │          Ry          │       │  ******  │    Sz    │
    ├───────────┤       ├─────┴─────┤
    │          Rz          │       │          Tx          │
    ├───────────┤       ├───────────┤
    │          Tx          │       │          Ty          │
    ├───────────┤       ├───────────┤
    │          Ty          │       │          Tz          │
    ├───────────┤       └───────────┘
    │          Tz          │
    └───────────┘

    (e)flag: 0010 または 0011        (f)flag: 0100 または 0101
    ┌───────────┐       ┌─────┬─────┐
    │          Rx          │       │    Sy    │    Sx    │         
    ├───────────┤       ├─────┼─────┤
    │          Ry          │       │  ******  │    Sz    │
    ├───────────┤       └─────┴─────┘
    │          Rz          │       
    └───────────┘

    (g)flag: 1000 または 1001 
    ┌───────────┐
    │          Tx          │
    ├───────────┤
    │          Ty          │
    ├───────────┤
    │          Tz          │
    └───────────┘
			Rx,Ry,Rz:	回転角
					（32bit符号付整数、4096が1°）
			Sx,Sy,Sz:	スケーリング値
					（16bit符号付整数、4096が1.0に相当）
			Tx,Ty,Tz:	平行移動
					（32bit符号付整数値）

	   図7: Coordinate(RST) の場合のpacket data の構成


4.3 packet type が TMD データID (0010) の場合

 指定したオブジェクトの実体となるモデリングデータ( TMD データ) を設定
します。 この場合、flag は全く使用されません。packet dataは1ワードで、
下位2ByteがTMDデータのIDになります。(図8 参照)

	                    │<── 16bit  ──>│
	┌─────────┬─────────┐
	│     ********     │   TMD data ID    │
	└─────────┴─────────┘

	    図8: TMD データID の場合のpacket data の構成

4.4 packet type が 親オブジェクトID (0011) の場合

 指定したオブジェクトの親オブジェクトを設定します。この場合、flag は全
く使用されません。packet dataは1ワードで、下位2Byteが親オブジェクトの
IDになります。(図9 参照)

	                    │<── 16bit  ──>│
	┌─────────┬─────────┐
	│     ********     │ Parent object ID │
	└─────────┴─────────┘

	    図9: 親オブジェクトの場合のpacket data の構成

4.5 packet type が MATRIX 値 (0100) の場合

 指定したオブジェクトのマトリクス値を直接設定します。GsDOBJ 構造体の
lsmatrix を設定します。この場合、flag は全く使用されません。

  packet data は、図10 のような構成になります。

		┌────────┬───────┐ 
		│       R01      │      R00     │
		├────────┼───────┤
		│       R10      │      R02     │
		├────────┼───────┤
		│       R11      │      R11     │
		├────────┼───────┤
		│       R21      │      R20     │
		├────────┼───────┤
		│    ********    │      R22     │
		├────────┴───────┤   
		│                Tx              │
		├────────────────┤
		│                Ty              │
		├────────────────┤
		│                Tz              │
		└────────────────┘

	      図10: MATRIX 値の場合のpacket data の構成


4.6 packet type が TMD データ本体 (0101) の場合

   未定

4.7 packet type が光源 (0110) の場合

 光源の設定を行ないます。この場合、object ID フィールドは、普通のオブ
ジェクトのID とは異なり、光源専用のID となります。
flag は次のような意味を持ちます(図11 参照)。

    ┌──────┬──────┬──────┬──────┐
    │            │            │            │            │
    │ ********** │    color   │  direction │  data type │ 
    │            │            │            │            │
    └──────┴──────┴──────┴──────┘

		       図11:  光源の場合のflag

	・data type …データのタイプ
		-  0 …絶対値
		-  1 …直前フレームからの差分

	・direction …方向フラグ
		-  0 …無し
		-  1 …有り

	・color …色フラグ
		-  0 …無し
		-  1 …有り

  また、packet data の構成は、flag のdirection ビット、color ビットの
値により異なり、図12 のようになります。
X,Y,Zは光源の照射方向を表すベクトルの成分で正規化されている必要はあり
ません。、R,G,Bは光源色のRGB値で0〜255の値をとります。

    (a)flag: 0110 または 0111        (b)flag: 0100 または 0101
    ┌───────────┐       ┌───────────┐
    │          Ｘ          │       │          Ｘ          │
    ├───────────┤       ├───────────┤
    │          Ｙ          │       │          Ｙ          │
    ├───────────┤       ├───────────┤
    │          Ｚ          │       │          Ｚ          │
    ├──┬──┬──┬──┤       └───────────┘
    │ ** │ Ｂ │ Ｇ │ Ｒ │ 
    └──┴──┴──┴──┘

    (c)flag: 0010 または 0011
    ┌──┬──┬──┬──┐
    │ ** │ Ｂ │ Ｇ │ Ｒ │ 
    └──┴──┴──┴──┘

		図12: 光源の場合のpacket data の構成


4.8 packet type がカメラ (0111) の場合

 視点位置情報の設定を行います。object IDフィールドの値は、普通のオブジェ
クトのID とは別の、カメラ専用のID となります。

指定方法には２つの表現があり、flagフィールドのcamera typeビットで選択
します。１つはカメラ位置とカメラの注視点位置を２セットの座標値で指定す
る方法です。もう１つはオブジェクトと同様にRotation/Transferの値で指定
する方法です。

 flag は次のような意味を持ちます(図13 参照)。 camera type ビットによって、他
のビットの意味が変わってくることに注意して下さい。


    (a)camera type:0（注視点型）
    ┌──────┬──────┬──────┬──────┐
    │  z angle   │position &  │  data      │camera type │
    │            │  reference │      type  │      = 0   │
    └──────┴──────┴──────┴──────┘

    (b)camera type:1（Rotation/Trans型）
    ┌──────┬──────┬──────┬──────┐
    │ translation│  rotation  │  data      │camera type │
    │            │            │      type  │      = 1   │
    └──────┴──────┴──────┴──────┘

		      図13: カメラの場合のflag

	1.  camera type ビットが0（注視点型）の時

	・data type …データのタイプ
		-  0 …絶対値
		-  1 …直前フレームからの差分

	・position & reference …視点位置、注視点位置フラグ
		-  0 …無し
		-  1 …有り

	・z angle …水平からの注視点角度フラグ
		-  0 …無し
		-  1 …有り

	2.  camera type ビットが1（Rotation/Trans型）の時

	・data type …データのタイプ
		-  0 …絶対値
		-  1 …直前フレームからの差分

	・rotation …回転(R) フラグ
		-  0 …無し
		-  1 …有り

	・translation …平行移動(T) フラグ
		-  0 …無し
		-  1 …有り

  また、packet data の構成は、flagのcamera typeビットにより異なり、図
14、図15 のようになります。

    (a)flag: 1100 または 1110        (b)flag: 0100 または 0110
    ┌───────────┐       ┌───────────┐
    │          Px          │       │          Px          │
    ├───────────┤       ├───────────┤
    │          Py          │       │          Py          │
    ├───────────┤       ├───────────┤
    │          Pz          │       │          Pz          │
    ├───────────┤       ├───────────┤
    │          Rx          │       │          Rx          │
    ├───────────┤       ├───────────┤
    │          Ry          │       │          Ry          │
    ├───────────┤       ├───────────┤
    │          Rz          │       │          Rz          │
    ├───────────┤       └───────────┘
    │          Ｚ          │
    └───────────┘

    (c)flag: 1000 または 1010
    ┌───────────┐
    │          Ｚ          │
    └───────────┘

			Px,Py,Pz:	カメラ位置
			Rx,Ry,Rz:	注視点位置
			Z:		Z軸捻り角

	    図14: カメラの場合のpacket data の構成(その1)


    (a)flag: 0111                    (b)flag: 0011
    ┌───────────┐       ┌───────────┐
    │          Rx          │       │          Rx          │
    ├───────────┤       ├───────────┤
    │          Ry          │       │          Ry          │
    ├───────────┤       ├───────────┤
    │          Rz          │       │          Rz          │
    ├───────────┤       └───────────┘
    │          Tx          │
    ├───────────┤
    │          Ty          │
    ├───────────┤
    │          Tz          │
    └───────────┘

    (c)flag: 0101
    ┌───────────┐ 
    │          Tx          │
    ├───────────┤
    │          Ty          │
    ├───────────┤
    │          Tz          │
    └───────────┘
			Rx,Ry,Rz:	回転角
			Tx,Ty,Tz:	平行移動

	    図15: カメラの場合のpacket data の構成(その2)


4.9 packet type がオブジェクト制御 (1000) の場合

 オブジェクトに対する制御の設定を行います。この場合、packet data はあ
りません。 また、flag は次のような意味を持ちます。

	・0000 …create
	・0001 …kill
	・0010〜1111 …reserved

新規作成されたオブジェクトの属性はアニメーション再生ルーチンに依存しま
すが、標準ルーチンでは次のように設定されます。

	・親オブジェクトは World
	・モデリングデータは未定義
	・attributeは0x80000000（表示制御ビットのみON）


4.10 packet type が 特殊コマンド (1111)  の場合

 アニメーション・データの制御を行います。詳細は未定です。
