$PSDocId: Document Version 1.0 for Runtime Library Version 3.3$
*関数詳細
	
ResetGraph	描画エンジンを初期化

	形式	int ResetGraph(int mode)

	引数	mode	リセットモード
			0: オールリセット。描画環境・表示環境を初期化する。
			1: 現在の描画をキャンセルしてコマンドキューをフラッ
			  シュする。
	
	解説	グラフィックシステムを mode で指定したモードでリセットする。
	
	返り値	なし

SetGraphDebug	デバッグレベルを設定

	形式	int SetGraphDebug(int level)

	引数	level	デバッグレベル
			0: 全てのチェックを行なわない。
			1: 登録・描画されるプリミティブの整合性を
			  チェックする。
			2: 登録・描画されるプリミティブをプリントする
	
	解説	グラフィックシステムのデバッグレベル level に設定する。
	
	返り値	直前のデバッグレベル値

GetGraphDebug	現在のデバッグレベルを獲得

	形式	int GetGraphDebug(void) 

	解説	グラフィックシステムのデバッグレベルを獲得する
	
	返り値	現在のデバッグレベル値

SetDispMask	ディスプレイマスクを設定

	形式	void SetDispMask(int mask)
	
	引数	mask	0: ディスプレイに表示を行なわない。
			1: ディスプレイに表示を行なう。

	解説	ディスプレイへの表示を許可する。

	返り値	なし
	

PutDrawEnv	描画環境を設定する。

	形式	DRAWENV *PutDrawEnv(DRAWENV *env)
	
	引数	env	描画環境
	
	解説	描画オフセット・描画クリップエリアなど、描画に関するの
		基本的なパラメータを設定する。
		
	返り値	env の先頭アドレス
	
	備考	PutDrawEnv() によって指定されたの描画環境は次に PutDrawEnv()
		が実行されるか、DR_ENV プリミティブが実行されるまで有効。
	

PutDispEnv	表示環境を設定

	形式	DISPENV *PutDispEnv(DISPENV *env)
	
	引数	env	表示環境

	解説	表示環境を設定する。表示環境は関数が呼ばれた時点で即座に
		実行される。
	
	返り値	env の先頭アドレス
	

GetDrawEnv	現在の描画環境を獲得

	形式	DRAWENV *GetDrawEnv(DRAWENV *env)
	
	引数	env	描画環境
	
	解説	現在の描画環境を env に返す。

	返り値	env の先頭アドレス

GetDispEnv	現在の表示環境を獲得

	形式	DISPENV *GetDispEnv(DISPENV *env)
	
	引数	env	表示環境
	
	解説	現在の表示環境を env に返す。

	返り値	env の先頭アドレス

LoadImage	フレームバッファにデータを転送

	形式	int LoadImage(RECT *rect, u_long *p)
	
	引数	recp	転送先矩形領域
		p	転送元メインメモリアドレス

	解説	recp で指定されたフレームバッファの矩形領域にアドレス
		p 以下のデータを転送する。
	
	返り値	キューの数
	
	備考	ノンブロック関数であるため、実際の転送の終了は DrawSync() で
		検出する必要がある。
		転送領域は、描画環境（クリップ・オフセット）の影響を受けない。
		転送領域は描画可能領域(0,0)-(1023,511) に収まる必要がある。

StoreImage	フレームバッファからデータを転送

	形式	int StoreImage(RECT *rect, u_long *p)
	
	引数	recp	転送元矩形領域
		p	転送先メインメモリアドレス

	解説	recp で指定されたフレームバッファの矩形領域をアドレス
		p 以下に転送する

	返り値	キューの数
	
	備考	ノンブロック関数であるため、実際の転送の終了は DrawSync() で
		検出する必要がある。
		転送領域は、描画環境（クリップ・オフセット）の影響を受けない。
		転送領域は描画可能領域(0,0)-(1023,511) に収まる必要がある。
	

MoveImage	フレームバッファ間でデータを転送

	形式	int MoveImage(RECT *rect, int x, int y)

	引数	recp	転送元矩形領域
		x, y	転送先矩形領域左上端点

	解説	recp で指定されたフレームバッファの矩形領域を x,y から
		はじまる同じ大きさの矩形領域に転送する。

	返り値	キューの数
	
	備考	ノンブロック関数であるため、実際の転送の終了は DrawSync() で
		検出する必要がある。
		転送領域は、描画環境（クリップ／オフセット）の影響を受けない。
		転送領域は転送元、転送先ともに、描画可能領域(0,0)-(1023,511)
		に収まる必要がある。
	
		転送元の内容は保存される。また、転送元と転送先の領域が重な
		っている場合は、動作は保証されない。
	
ClearImage	フレームバッファ高速塗りつぶし

	形式	int ClearImage(RECT *rect, u_char r, u_char g, u_char b)

	引数	recp	塗りつぶす矩形領域
		r, g, b	塗りつぶすピクセル値

	解説	recp で指定されたフレームバッファの矩形領域を (r,g,b) の
		輝度値で塗りつぶす

	返り値	キューの数
	
	備考	ノンブロック関数であるため、実際の転送の終了は DrawSync() で
		検出する必要がある。
		描画領域は、描画環境（クリップ／オフセット）の影響を受けない。
	
SetDrawEnv	描画環境変更プリミティブの内容を初期化

	形式	void SetDrawEnv(DR_ENV *dr_env, DRAWENV *env)
	
	引数	dr_env	描画変更プリミティブ
		env	dr_env に設定する描画環境を記述した描画環境構造体

	解説	描画環境変更プリミティブ dr_env を描画環境 env の内容に
		初期化する。初期化済みの描画環境変更プリミティブを、
		AddPrim() でＯＴに登録することにより、描画途中での描画環境
		を変更できる。
	
	返り値	なし

	備考	DRAWENV と DR_ENV は、保持している情報は同一でもその表
		現形式が異なる。DRAWENV 自体はプリミティブリストに接続でき
		ない。
	
		DR_ENV プリミティブが実行されると最初の描画環境は破壊される。

SetDrawMode	描画モードプリミティブの内容を初期化

	形式	void SetDrawMode(DR_MODE *p,
			 int dfe, int dtd, int tpage, RECT *tw)
	
	引数	p	描画モードプリミティブ
		dtd	ディザ処理フラグ
				0:ディザをかけない
				1:ディザをかける
		dfe	表示エリアへの描画フラグ
				0:表示エリアには描画を行なわない。
				1:表示エリアにも描画を行なう。
		tpage	テクスチャページ
		tw	テクスチャウィンドウ

	解説	描画モードプリミティブ初期化する。初期化済みの描画環境変更
		プリミティブを、AddPrim() でＯＴに登録することにより、描画
		途中での描画環境の一部を変更できる。tw に 0 を指定するとテ
		クスチャウィンドウは変更されない。
	
	返り値	なし

SetTexWindow	テクスチャウィンドウプリミティブの内容を初期化

	形式	void SetTexWindow(DR_TWIN *p, RECT *tw)
	
	引数	p	テクスチャウィンドウプリミティブ
		tw	テクスチャウィンドウ

	解説	テクスチャウィンドウプリミティブを初期化する。初期化済みの
		描画環境変更プリミティブを、AddPrim() でＯＴに登録すること
		により、描画途中での描画環境の一部を変更できる。
	
	返り値	なし

SetDrawArea	描画範囲設定プリミティブの内容を初期化

	形式	void SetDrawArea(DR_AREA *p, RECT *r)
	
	引数	p	描画範囲設定プリミティブ
		r	描画範囲

	解説	描画範囲設定プリミティブを初期化する。初期化済みの描画環
		境変更プリミティブを、AddPrim() でＯＴに登録すること
		により、描画途中での描画環境の一部を変更できる。
	
	返り値	なし

SetDrawOffset	描画オフセット設定プリミティブの内容を初期化

	形式	void SetDrawOffset(DR_OFFSET *p, u_short *ofs)
	
	引数	p	描画オフセット設定プリミティブ
		ofs	描画オフセット

	解説	描画オフセットプリミティブを初期化する。初期化済みの描画環
		境変更プリミティブを、AddPrim() でＯＴに登録すること
		により、描画途中での描画環境の一部を変更できる。
	
	返り値	なし

SetDrawMove	MoveImage プリミティブの内容を初期化

	形式	void SetDrawMove(DR_MOVE *p) 
	
	引数	p	矩形領域複写オフセット設定プリミティブ

	解説	矩形領域複写プリミティブを初期化する。初期化済みのプリ
		ミティブを、AddPrim() でＯＴに登録することにより、
		MoveImage() 関数と同等の処理（矩形領域の複写）を行なう
		ことができる。
	
	返り値	なし

	
SetPolyF3	フラットシェーディング３角形プリミティブを初期化

	形式	void SetPolyF3(POLY_F3 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetPolyF4	フラットシェーディング４角形プリミティブを初期化

	形式	void SetPolyF4(POLY_F4 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetPolyG3	グーローシェーディング３角形プリミティブを初期化

	形式	void SetPolyG3(POLY_G3 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetPolyG4	グーローシェーディング４角形プリミティブを初期化

	形式	void SetPolyG4(POLY_G4 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetPolyFT3	フラットテクスチャ３角形プリミティブを初期化

	形式	void SetPolyFT3(POLY_FT3 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetPolyFT4	フラットテクスチャ４角形プリミティブを初期化

	形式	void SetPolyFT4(POLY_FT4 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetPolyGT3	グーローテクスチャ３角形プリミティブを初期化

	形式	void SetPolyGT3(POLY_GT3 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetPolyGT4	グーローテクスチャ４角形プリミティブを初期化

	形式	void SetPolyGT4(POLY_GT4 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetSprt		スプライトプリミティブを初期化

	形式	void SetSprt(SPRT *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
	備考	スプライトプリミティブは同等の処理をポリゴンプリミティブで
		行なう場合よりも高速

SetSprt8	8x8 スプライトプリミティブを初期化

	形式	void SetSprt8(SPRT_8 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetSprt16	16x16 スプライトプリミティブを初期化

	形式	void SetSprt16(SPRT_16 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetTile		タイルプリミティブを初期化

	形式	void SetTile(TILE *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
	備考	タイルプリミティブは同等の処理をポリゴンプリミティブで
		行なう場合よりも高速
	
SetTile1	1x1タイルプリミティブを初期化

	形式	void SetTile1(TILE_1 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetTile8	8x8タイルプリミティブを初期化

	形式	void SetTile8(TILE_8 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetTile16	16x16タイルプリミティブを初期化

	形式	void SetTile16(TILE_16 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetLineF2	フラット非連結直線描画プリミティブを初期化

	形式	void SetLineF2(LINE_F2 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetLineF3	フラット１連結直線描画プリミティブを初期化

	形式	void SetLineF3(LINE_F3 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetLineF4	フラット２連結直線描画プリミティブ

	形式	void SetLineF4(LINE_F4 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetLineG2	グーロー非連結直線描画プリミティブを初期化

	形式	void SetLineG2(LINE_G2 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetLineG3	グーロー１連結直線描画プリミティブを初期化

	形式	void SetLineG3(LINE_G3 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetLineG4	グーロー２連結直線描画プリミティブを初期化

	形式	void SetLineG4(LINE_G4 *p) 
	
	引数	p	プリミティブ先頭アドレス

	解説	p で指定されたそれぞれのプリミティブを初期化する。
	
	返り値	なし
	
SetSemiTrans	プリミティブに半透明属性を設定

	形式	void SetSemiTrans(void *p, int abe) 

	引数	p	プリミティブ先頭アドレス
		abe	半透明フラグ
				0:半透明OFF,
				1:半透明ON
	
	解説	p で指定した描画プリミティブに abe に従い半透明属性を
		設定する。
		半透明 ON の場合は以下の条件のピクセルが半透明で描画
		される。
	
		=============================================================
		プリミティブ		|半透明処理されるピクセル
		------------------------+------------------------------------
		POLY_FT3/POLY_FT4  	|対応するテクスチャピクセルの最上位
		POLY_GT3/POLY_GT4	|ビットが１のピクセル
		SPRT/SPRT_8/SPRT_16	|
		------------------------+------------------------------------
		その他の描画プリミティブ|全てのピクセル	
		--------------------------------------------------------------

	返り値	なし
	
	備考	半透明ピクセルは、描画ピクセル Pf とバックグラウンドピ
		クセルPb から以下のように計算される。

			P = F x Pf + B x Pb
		
		半透明レート (F, B) は、tpage メンバで指定される。
		tpage メンバを持たないスプライト・フラットプリミティブでは、
		カレントテクスチャページの半透明レートが使用される。

		半透明は一旦バックグラウンド輝度値を読み込むのため、
		描画速度は低下する。半透明を行なわないプリミティブの描画
		は必ず半透明モード OFF で実行する。

SetShadeTex	シェーディング機能の禁止

	形式	void SetShadeTex(void *p, int tge) 
	
	引数	p	プリミティブ先頭アドレス
		tge	シェーディング禁止フラグ
				0: シェーディングを行なう
				1: シェーディングを行なわない
	
	解説	p で指定した描画プリミティブに tge に従いシェーディン
		グ機能を許可／禁止する。

	解説	テクスチャ＋シェーディング onの場合、ポリゴン内部の各
		ピクセルは、対応するテクスチャパターンのピクセル値Ｔと
		対応する輝度値Ｌから、以下のように計算される。
	
				P = (T*L)/128

		つまり、L = 128 の場合に、テクスチャパターンの輝度値が
		そのまま描画される。
		値によって結果がオーバーフローする場合、ピクセル値は、
		255 にクリップされる。
	
		tge = 1 の場合は、輝度値を乗算せずに、テクスチャパタ
		ーンの値をそのままピクセルの値とする。
	
	返り値	なし
	
	備考	POLY_FT3, POLY_FT4, SPRT, SPRT_8, SPRT_16 以外のプリミテ
		ィブには使用できない。

GetTPage	プリミティブの tpage メンバの値を計算

	形式	u_short GetTPage(int tp, int abr, int x, int y) 
	
	引数	tp 	テクスチャモード
				0: 4bitCLUT
				1: 8bitCLUT
				2:16bitDIrect
	
		abr	半透明レート
				0: 0.5 x Back + 0.5  x Forward
				1: 1.0 x Back + 1.0  x Forward
				2: 1.0 x Back - 1.0  x Forward
				3: 1.0 x Back + 0.25 x Forward
	
		x, y	テクスチャページアドレス
				
	
	解説	テクスチャページ ID を計算し、それを返す。
	
	返り値	テクスチャページ ID
	
	備考	半透明レートは、テクスチャマッピングを行なわないポリゴ
		ンに対しても有効。
	
		テクスチャページアドレスは、x 方向は 64 の倍数、
		y 方向は 256 の倍数に限られる。
	
GetClut		プリミティブの clut メンバの値を計算

	形式	u_short GetClut(int x, int y) 

	引数	x, y	CLUT のフレームバッファアドレス
				
	解説	テクスチャ CLUT ID を計算しそれを返す。
	
	返り値	clut ID
	
	備考	CLUT アドレスは、x 方向は 16 の倍数に限られる。

	
AddPrim		描画するプリミティブをＯＴに登録

	形式	void AddPrim(void *ot, void *p) 
	
	引数	ot	ＯＴエントリ
		p	登録するプリミティブの先頭アドレス
	
	解説	ＯＴエントリ *ot に アドレス *p で始まるプリミティブを
		登録する。 ot は、オーダリングテーブルか、他のプリミティ
		ブのポインタ

	返り値	なし

	備考	一つのＯＴの異なるエントリに同じプリミティブを繰り返して登
		録することはできない。
	
AddPrims	描画するプリミティブをまとめてＯＴに登録

	形式	void AddPrims(void *ot, void *p0, void *p1) 

	引数	ot	ＯＴエントリ
		p0	プリミティブリストの先頭プリミティブのアドレス
		p1	プリミティブリストの最後尾プリミティブのアドレス

	解説	ＯＴのエントリ *ot に アドレス *ps で始まるプリミティブ
		リストを登録する。プリミティブリストは、AddPrim() で接
		続された複数のプリミティブのリスト、あるいは、ローカル
		オーダリングテーブルによって作成されたリスト

	返り値	なし
	
NextPrim	プリミティブリストの次のプリミティブを獲得

	形式	void *NextPrim(void *p) 
	
	引数	p	プリミティブの先頭アドレス

	機能	プリミティブリストの次のプリミティブへのポインタを返す。
	
	返り値	次のプリミティブのポインタ
	
CatPrim		プリミティブリストを連結

	形式	void CatPrim(void *p0, void *p1) 
	
	引数	p0, p1	連結するプリミティブの先頭アドレス
	
	解説	プリミティブ p0 にプリミティブ p1 を連結する
		
	返り値	p0 の先頭アドレス

	解説	AddPrim() は一つのプリミティブをプリミティブリストに挿
		入するの対して、CatPrim() は単純に２つのプリミティブを
		連結する。
	
TermPrim	プリミティブリストを終端

	形式	void TermPrim(void *p) 
	
	引数	p	プリミティブの先頭アドレス

	解説	プリミティブリストを p のあとで分断し、強制的に終端する。

	返り値	なし

IsEndPrim	リストの最後尾のプリミティブを判定

	形式	int IsEndPrim(void *p) 
	
	引数	p	プリミティブの先頭アドレス

	解説	プリミティブリストの最後が p であるかを判定する

	返り値	0	最後尾でない
		1	最後尾

MargePrim	複数のプリミティブを結合				

	形式	int MargePrim(void *p0, void *p1)
									
	引数	p0	接続されるプリミティブ				
		p1	接続するプリミティブ				
									
	解説	プリミティブ p0 にプリミティブ p1 を連結する。 		
		以降連結されたプリミティブは、通常のように AddPrim()	
		などの処理を行なうことができる。			
									
	返り値	0	成功						
		-1	失敗						
									
	備考	p0, p1 は連続したメモリ領域になくてはならない		
		p0, p1 を合わせたプリミティブのサイズは 15ワード以下でな
		くてはならない。					

CheckPrim	プリミティブの各メンバの値の整合性をチェック

	形式	int CheckPrim(char *s, u_long *p)

	引数	s	任意の文字列
		p	プリミティブの先頭アドレス
	
	解説	プリミティブの各メンバの値の整合性を可能な限りチェックする。
		内容に不整合があれば、文字列 s に続けてそのプリミティブを
		プリントする。
		内容の修正は行なわない。

	返り値	0	正常
		-1	内容が不整合

	
ClearOTag	ＯＴを初期化する

	形式	u_long *ClearOTag(u_long *ot, int n)
	
	引数	ot	ＯＴの先頭ポインタ
		n	ＯＴのエントリ数
	
	解説	n 個の NextPrim(ot+i) = ot+i+1 の形式のＯＴを生成する。

	返り値	なし
	
	備考	ClearOTag() で初期化されたＯＴを実行する場合には、
		DrawOTag(ot) を実行する。
	
ClearOTagR	n の 逆順ＯＴを初期化

	形式	u_long *ClearOTagR(u_long *ot, int n)
	
	引数	ot	ＯＴの先頭ポインタ
		n	ＯＴのエントリ数
	
	解説	n 個の NextPrim(ot+i) = ot+i-1 の形式の逆順ＯＴを生成する。
	
	返り値	なし
	
	備考	ClearOTag() で初期化されたＯＴを実行する場合には、
		DrawOTag(ot+n-1) を実行する。
		大きな OT をクリアする場合は ClearOTag() よりも高速
	
DrawPrim	プリミティブを描画

	形式	void DrawPrim(void *p)

	引数	p	プリミティブのポインタ
	
	解説	初期化済みのプリミティブを一つ実行する。
	
	返り値	なし
	
	解説	DrawPrim() は、ノンブロック関数のため、実際の転送の終
		了は DrawSync() で検出する必要がある。
		DrawOTag() より低速。

DrawOTag	ＯＴに登録されたプリミティブを描画

	形式	void DrawOTag(u_long *p)

	引数	p	ＯＴの先頭ポインタ
	
	解説	ＯＴに登録されたプリミティブをまとめて実行する。
	
	返り値	なし
	
	解説	DrawOTag() は、ノンブロック関数のため、実際の転送の終了
		は DrawSync() で検出する必要がある。

DrawOTagIO	ＯＴに登録されたプリミティブを描画

	形式	void DrawOTagIO(u_long *p)

	引数	p	ＯＴの先頭ポインタ
	
	解説	ＯＴに登録されたプリミティブをまとめて実行する。
	
	返り値	なし
	
	解説	DrawOTagIO() は、DrawOTag() と同様の操作を プリミティ
		ブの整合性の検査を行ないながら、CPU によって実行する。
		デバッグ用。
	

BreakDraw	描画を中断する

	形式	u_long *BreakDraw()

	引数	なし

	解説	描画中に発行すると 現在描画中のポリゴンの描画の
		終了後 描画を中断させる。次のポリゴン描画のエントリ
		が 返るため DrawOTag()を 返り値を引数に発行すれば
		描画の再開が可能。

	返り値	次のポリゴン描画のエントリ

DrawSync	全ての描画の終了を待つ

	形式	int DrawSync(int mode)

	引数	mode	0: キューに登録されている全てのノンブロック関数
			   の終了を待つ。
			1: 現在のキューの段数を調べてそれを返す。
	
	解説	描画の終了を待つ。
	
	返り値	実行キューの段数
	
DrawSyncCallback	描画終了コールバック関数を設定

	形式	u_long DrawSyncCallback(void (*func)())
	
	引数	func	コールバック関数

	解説	描画終了時に呼ばれるコールバックを定義する。
		キューに登録された全てのリクエストが完了した時に
		関数 func が呼び出される。func に 0 を指定した場合は、
		コールバックは発生しない。
	
	返り値	なし

	備考	func 内では以降の描画終了割り込みはマスクされる。従って
		funcは必要な処理を終了したらすみやかにリターンする必要が
		ある。
	
SetDefDrawEnv	標準の描画環境を設定

	形式	DRAWENV *SetDefDrawEnv(DRAWENV *env,
			 int x, int y, int w, int h)

	引数	draw	描画環境
		x, y	描画領域の左上端点
		w, h	描画領域の幅と高さ

	解説	描画領域の左上点・幅・高さから標準の描画環境構造体のメ
		ンバを設定する。設定されるデフォルトの値は以下の通り。
	
		========================================================
		メンバ名|内容				|値
		--------+-------------------------------+---------------
		clip	|描画領域			|(x, y, w, h) 
		ofs[2]	|描画オフセット			|(x, y)
		tw	|テクスチャウィンドウ		|(0, 0, 0, 0)
		tpage	|テクスチャページ(tp,abr,tx,ty)	|(0, 0, 640, 0)
		dtd	|ディザ処理フラグ 		|1 (on)
	        dfe	|表示領域へ描画許可フラグ	| *1
		isbg	|描画領域クリアフラグ		|0 (クリアしない)
		r0,g0,b0|背景色				|(0,0,0)
		--------------------------------------------------------
		*1 h = 480 の場合は、 dfe = 0 （描画禁止）	
		   それ以外は、       dfe = 1 （描画許可）

	返り値	設定された描画環境の先頭ポインタ

	備考	SetDefDrawEnv() は DRAWENV 構造体に値を設定するだけで
		グラフィックシステムの内部状態は変更しない。
		ここでのパラメータが有効になるのは、PutDrawEnv()をコー
		ルした時点となる。
		
SetDefDispEnv	標準の表示環境を設定

	形式	DISPENV *SetDefDispEnv(DISPENV *env,
			 int x, int y, int w, int h)

	引数	disp	表示環境
		x, y	表示領域の左上端点
		w, h	表示領域の幅と高さ

	解説	描画領域の左上点・幅・高さから描画環境構造体のメンバを
		設定する。設定されるデフォルトの値は以下の通り。
	
		========================================================
		メンバ名|内容				|値
		--------+-------------------------------+---------------
		disp	|表示領域			|(x, y, w, h) 
		screen	|画面表示領域			|(0, 0)-(256,240)
		ininter	|インターレースフラグ		| 0
		isrgb24	|24bit モードフラグ		| 0
		--------------------------------------------------------
	
	返り値	設定された表示環境の先頭ポインタ

	備考	SetDefDispEnv() は DRAWENV 構造体に値を設定するだけで
		グラフィックシステムの内部状態は変更しない。
		ここでのパラメータが有効になるのは、PutDispEnv()をコー
		ルした時点となる。
	
LoadTPage	テクスチャページをロード

	形式	u_short LoadTPage(u_long *pix,
			 int tp, int abr, int x, int y, int w, int h)
	
	引数	tex	テクスチャパターン先頭アドレス 
		tp	転送テクスチャタイプ
		abr	半透明レート
		x, y	転送先フレームバッファアドレス
		w, h	テクスチャパターンサイズ

	解説	メインメモリ上の tex 以下のテクスチャパターンを
		フレームバッファ (x,y) 以下にロードし、ロードしたテク
		スチャパターンに対するテクスチャページ ID を計算する。
	
	返り値	ロードしたテクスチャパターンに対するテクスチャページ ID

	備考	テクスチャパターンサイズは フレームバッファ上での実際
		の転送領域の大きさではなく、ピクセル単位で指定する。
		LoadTpage() は、内部で LoadImage() を起動する。	
	

LoadClut	テクスチャ CLUT をロード

	形式	u_short LoadClut(u_long *clut, int x, int y)
	
	引数	col	テクスチャカラー先頭アドレス 
		x, y	転送先フレームバッファアドレス

	解説	メインメモリ上の col 以下のテクスチャカラーデータ
		(CLUT) をフレームバッファ (x,y) 以下にロードし、ロー
		ドしたテクスチャ CLUT に対するテクスチャCLUT ID を計
		算する。

	返り値	ロードした CLUT に対する CLUT ID

	備考	4bit モードであっても常に25色分のデータを転送する。
		LoadClut() は、内部で LoadImage() を起動する。	
	
FntLoad		フォントパターンを転送

	形式	void FntLoad(int tx, int ty)

	引数	tx, ty	フォントパターンフレームバッファアドレス 
	
	解説	デバッグ用のフォントパターンをフレームバッファへ転送する。
	
	返り値	なし
	
	解説	基本フォントパターン(4bit テクスチャ 256x128) をフレー
		ムバッファにロードし、全てのプリントストリームを初期化
		する。

	備考	FntLoad() は、FntOpen(), FntFlush() に先立ちかならず実行す
		る必要がある。
		フォントエリアはアプリケーションで使用するフレームバッファ
		エリアと衝突してはならない。

FntOpen		プリントストリームをオープン

	形式	int FntOpen(int x, int y, int w, int h, int isbg, int n)

	引数	x, y	表示開始位置 
		w, h	表示領域 
		isbg	背景自動クリア
				0: 表示時に背景を(0,0,0) にクリアする。
				1: 表示時に背景を(0,0,0) にクリアしない。
		n	最大文字数

	解説	オンスクリーンプリント用のストリームをオープンする。
		これ以後、フレームバッファの (x,y)-(x+w, y+h) の矩形領
		域に FntPrint() 関数を使用して最大 n 文字の文字列を描画す
		ることができる。
		isbg に 1 を指定すると文字列を描画する際に背景をクリア
		する。
	
	返り値	ストリームID
	
	備考	同時にオープンできるストリーム数は 8
		一旦オープンしたストリームは、次にFntLoad() をコールするまで、
		クローズできない。

FntPrint	プリントストリームに出力

	形式	int FntPrint(int id, ...)

	引数	id	プリントストリーム ID
		format	プリントフォーマット

	解説	printf() インターフェースでプリントストリームに文字列 s
		を送る。
	
	返り値	ストリーム内の文字数

	備考	実際に文字列が表示されるのは、FntFlush() が実行された時となる。

FntFlush	プリントストリーム内容を描画

	形式	u_long *FntFlush(int id)

	引数	id	プリントストリーム ID

	解説	プリントストリームの内容をフレームバッファに描画する。
		実際には、文字列 s の長さ分のスプライトプリミティブリ
		ストを初期化して描画を行なう。
	返り値
		描画に使用したプリミティブリストの先頭ポインタ

	備考	描画終了後、プリントストリームの内容もフラッシュされる。

KanjiFntOpen	プリントストリームをオープン

	形式	int KanjiFntOpen(int x,
			 int y,
			 int w,
			 int h, int dx, int dy, int cx, int cy, int isbg, int n)

	引数	x, y	表示開始位置					
		w, h	表示領域					
		dx, dy	漢字フォントパターンフレームバッファアドレス	
		cx, cy	漢字 clut フレームバッファアドレス		
		isbg	背景自動クリア					
				0: 表示時に背景を(0,0,0) にクリアする。	
				1: 表示時に背景を(0,0,0) にクリアしない。
		n	最大文字数					
									
	解説	オンスクリーンプリント用のストリームをオープンする。	
		これ以後、フレームバッファの (x,y)-(x+w, y+h) の矩形領	
		域に KanjiFntPrint() 関数を使用して最大 n 文字の文字列
		を描画することができる。
		isbg に 1 を指定すると文字列を描画する際に背景をクリア	
		する。							
									
	返り値	ストリームID						
									
	備考	同時にオープンできるストリーム数は 8			
		一旦オープンしたストリームは、次に KanjiFntLoad() をコ
		ールするまで、クローズできない。
		漢字フォントエリアはアプリケーションで使用するフレーム
		バッファエリアと衝突してはならない。

									
KanjiFntPrint	プリントストリームに出力				

	形式	int KanjiFntPrint(int id, ...)
									
	引数	id	プリントストリーム ID				
		format	プリントフォーマット				
									
	解説	printf() インターフェースでプリントストリームに SJIS
		全角文字列 s を送る。					
									
	返り値	ストリーム内の文字数					
									
	備考	漢字コードは SJIS でなければならない。			
		文字列の中に、全角と半角を混在させることもできるが、	
		表示されるときにすべて全角に変換される。		
		半角カナはサポートしていない。				
		実際に文字列が表示されるのは、KanjiFntFlush() が実行さ
		れた時となる。						
									
KanjiFntFlush	プリントストリーム内容を描画				

	形式	u_long *KanjiFntFlush(int id)
									
	引数	id	プリントストリーム ID				
									
	解説	プリントストリームの内容をフレームバッファに描画する。	
		実際には、文字列 s の長さ分のポリゴンプリミティブリ	
		ストを初期化して描画を行なう。				
	返り値								
		描画に使用したプリミティブリストの先頭ポインタ		
									
	備考	描画終了後、プリントストリームの内容もフラッシュされる。
									
GetTimSize	Krom2Tim() で返される Tim データの領域のサイズを計算する

	形式	int GetTimSize(u_char *sjis)
									
	引数	sjis	SJIS 文字列					
									
	解説	Krom2Tim() で返される Tim データの領域のサイズを計算す
		る。このサイズ分の領域を malloc() などで確保し、
		Krom2Tim() を呼ぶ。

	返り値	Krom2Tim() で返される Tim データの領域のサイズ		
									
	備考								
									
Krom2Tim	SJIS 文字列を 4 bits clut の Tim データに変換する	

	形式	int Krom2Tim(u_char *sjis,
			 u_long *taddr,
			 int dx, int dy, int cdx, int cdy, u_int fg, u_int bg)
									
	引数	sjis	SJIS 文字列					
		addr	Tim データを格納する領域			
		dx, dy	pixel データの VRAM 上での x, y 座標		
		cx, cy	clut データの VRAM 上での x, y 座標		
		fg, bg	文字の色および、bg の色				
									
	解説	SJIS 文字列を 4 bits clut の Tim データに変換し、	
		addr に返す。						
									
	返り値	不正なコードを渡した場合、-1 が返される。		
									
	備考	あらかじめ、GetTimSize() で返されるサイズの		
		領域を確保しておかなければならない。			
		漢字コードは SJIS でなければならない。			
		文字列の中に、全角と半角を混在させることもできるが、	
		表示されるときにすべて全角に変換される。		
		半角カナはサポートしていない。				
									

OpenTIM		TIM データをオープン

	形式	int OpenTIM(u_long *addr)

	引数	addr	TIM がロードされているメインメモリのアドレス

	解説	TIM をオープンする。以降、ReadTIM で オープンした TIM
		の TIM 情報を読み出すことができる。

	返り値	0	成功
		その他	失敗

	備考	同時にオープンできる TIM は一つに限られる。
		オープンした TIM は次に	OpenTIM() が呼ばれるまでクロー
		ズされない。

ReadTIM		TIM ヘッダを解析

	形式	TIM_IMAGE *ReadTIM(TIM_IMAGE *timimg)
	
	引数	image	TIM_IMAGE 構造体ポインタ 
	
	解説	TIM のヘッダ情報をひとつとりだし、構造体 TIM_IMAGE
		*image に格納する。

	返り値	0		TIM の解析に失敗
		その他		image の先頭アドレス
	

OpenTMD		TMD データをオープン

	形式	int OpenTMD(u_long *tmd, int obj_no)

	引数	addr	TMDがロードされているメインメモリ上のアドレス 
		obj_no	オブジェクト No.

	解説	obj_no 番目のオブジェクトの TMD をオープンする。
		以降、ReadTMD で オープンされた TMD のプリミティブ情報
		を読み出すことができる。
	
	返り値	正整数	オブジェクトを構成するポリゴン数
		その他	失敗
	
	備考	同時にオープンできる TMD は一つに限られる。オープン
		オープンした TMD は次に	OpenTMD() が呼ばれるまでクロー
		ズされない。

ReadTMD		TMD プリミティブの内容を解析

	形式	TMD_PRIM *ReadTMD(TMD_PRIM *tmdprim)
	
	引数	tmdprim		TMD 情報構造体 
	
	解説	TMD のプリミティブ情報を順番にとりだし、構造体 TMD_PRIM
		*tmdprim に格納する。

	返り値	0	失敗
		その他	tmdprim の先頭アドレス
	
	備考	TMD のタイプによっては構造体の全てのメンバが有効とは限
		らない。

SetDumpFnt	オンスクリーンダンプのためのストリームを定義

	形式	void SetDumpFnt(int id)
	
	引数	id	プリントストリーム ID
	
	解説	デバッグプリントのためのプリントストリームを設定する
		これ以降、デバッグプリント関数の出力は、id に指定される
		ストリームに対して行なわれる。
		実際の表示は、FntFlush() 関数で実行される。

	返り値	なし

DumpOTag	ＯＴに登録されたプリミティブをプリント

	形式	void DumpOTag(u_long *p)
	
	引数	p	ＯＴの先頭ポインタ

	解説	ＯＴに登録されたプリミティブをプリントする。

	返り値	なし

DumpTPage	プリミティブの tpage メンバの内容をプリント

	形式	void DumpTPage(u_short tpage) 
	
	引数	tpage	テクスチャページ ID

	解説	テクスチャページ ID の内容をプリントする。

	返り値	なし

DumpClut	プリミティブの clut メンバの内容をプリント

	形式	void DumpClut(u_short clut) 
	
	引数	clut	CLUT ID

	解説	CLUT ID の内容をプリントする。

	返り値	なし

DumpDrawEnv	描画環境構造体の内容をプリント

	形式	void DumpDrawEnv(DRAWENV *env)
	
	引数	env	描画環境

	解説	描画環境構造体の内容をプリントする。

	返り値	なし

	
DumpDispEnv	描画環境構造体の内容をプリント

	形式	void DumpDispEnv(DISPENV *env)
	
	引数	env	表示環境

	解説	表示環境構造体の内容をプリントする。

	返り値	なし

*マクロ詳細

setVector	ベクトルに値を設定
	
	形式	setVector(v, x, y, z)
	
	引数	v	ベクトルへのポインタ
		x, y, z	座標値

	解説	VECTOR/SVECTOR に値 (x,y,z) を設定する

	返り値	なし
	
	備考	マクロであるためベクトルの型に依存しない。
		また、
	
		a) setVector((SVECTOR *)v, x, y, z)
		b) setVector((VECTOR  *)v, x, y, z)

		では動作が異なる。
	
addVector	ベクトルの加算
	
	形式	addVector(v0, v1)
	
	引数	v0, v1	ベクトルのポインタ	

	解説	ベクトル v0 に v1 を加算する

	返り値	なし
	
	備考	マクロであるためベクトルの型に依存しない。
	

copyVector	ベクトルのコピー
	
	形式	addVector(v0, v1)
	
	引数	v0, v1	ベクトルのポインタ	

	解説	ベクトル v0 に v1 をコピーする

	返り値	なし
	
	備考	マクロであるためベクトルの型に依存しない。
	

setRECT		矩形領域の設定
	
	形式	setRECT(r, x, y, w, h)
	
	引数	r	RECT 構造体のポインタ
		x, y	矩形領域の右上端点
		w, h	矩形領域の大きさ

	解説	RECT *r のメンバ (x, y, w, h) の値を設定する

	返り値	なし
	

setRGB0		プリミティブの RGB メンバを設定
	
	形式	setRGB0(p, r0, g0, b0)

	引数	p		プリミティブのポインタ
		r0,g0,b0	プリミティブの RGB メンバ

	解説	プリミティブ p の RGB メンバに値を設定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。

	
setRGB1		プリミティブの RGB メンバを設定
	
	形式	setRGB1(p, r1, g1, b1)

	引数	p		プリミティブのポインタ
		r1,g1,b1	プリミティブの RGB メンバ

	解説	プリミティブ p の RGB メンバに値を設定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。
		また、
	
		a) setRGB1((POLY_FT4 *)p, r1, g1, b1)
		b) setRGB1((POLY_F4  *)p, r1, g1, b1)

		では動作が異なる。
	
setRGB2		プリミティブの RGB メンバを設定
	
	形式	setRGB2(p, r2, g2, b2)

	引数	p		プリミティブのポインタ
		r2,g2,b2	プリミティブの RGB メンバ

	解説	プリミティブ p の RGB メンバに値を設定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。

	
setRGB3		プリミティブの RGB メンバを設定
	
	形式	setRGB0(p, r3, g3, b3)

	引数	p		プリミティブのポインタ
		r3,g3,b3	プリミティブの RGB メンバ

	解説	プリミティブ p の RGB メンバに値を設定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。
	

setXY0		プリミティブの XY メンバを設定
	
	形式	setXY0(p, x0, y0)				
	
	引数	p		プリミティブのポインタ
		x0,y0		プリミティブの XY メンバ

	解説	プリミティブの XY メンバに値を設定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。

setXY2		プリミティブの XY メンバを設定
	
	形式	setXY2(p, x0, y0, x1, y1)
		setXY3(p, x0, y0, x1, y1, x2, y2)		
		setXY4(p, x0, y0, x1, y1, x2, y2, x3, y3)		
	
	引数	p		プリミティブのポインタ
		x0,y0,x1,y1	プリミティブの XY メンバ

	解説	プリミティブの XY メンバに値を設定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。

setXY3		プリミティブの XY メンバを設定
	
	形式	setXY3(p, x0, y0, x1, y1, x2, y2)		
	
	引数	p		プリミティブのポインタ
		x0,y0,..x2,y2	プリミティブの XY メンバ

	解説	プリミティブの XY メンバに値を設定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。

setXY4		プリミティブの XY メンバを設定
	
	形式	setXY4(p, x0, y0, x1, y1, x2, y2, x3, y3)		
	
	引数	p		プリミティブのポインタ
		x0,y0,..x3,y3	プリミティブの XY メンバ

	解説	プリミティブの XY メンバに値を設定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。

setXYWH		４点指定プリミティブの XY メンバを設定
	
	形式	setXYWH(p, x0, y0, w, h)				
	
	引数	p		プリミティブのポインタ
		x0,y0		プリミティブの左上端点
		w, h		プリミティブの幅と高さ

	解説	(x0,y0)-(x0+w,y0+h) を対角線にもつ矩形の各座標をプリミ
		ティブの (x0,y0)..(x3,y3) メンバに指定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。
		スプライトプリミティブには、使用できない。

setWH		プリミティブ p の w, h メンバに値を設定する。
	
	形式	setWH(p, w, h)

	引数	p		プリミティブのポインタ
		w, h		プリミティブの幅と高さ

	解説	w,h のメンバをもつプリミティブに対して w,h を指定する。

	返り値	なし
	
	備考	マクロであるためベクトルの型に依存しない。
		w, h をメンバに持たないプリミティブには使用できない。
	
setUV0		プリミティブの UV メンバを設定

	形式	setUV0(p, u0, v0)				
	
	引数	p		プリミティブのポインタ
		u0,v0		プリミティブの UV メンバ
	
	解説	プリミティブ p の UV メンバに値を設定する。
	
	備考	マクロであるためプリミティブの型に依存しない。
	
setUV3		プリミティブの UV メンバを設定

	形式	setUV3(p, u0, v0, u1, v1, u2, v2)		
	
	引数	p		プリミティブのポインタ
		u0,v0...u2,v2	プリミティブの UV メンバ
	
	解説	プリミティブ p の UV メンバに値を設定する。
	
	備考	マクロであるためプリミティブの型に依存しない。
	
setUV4		プリミティブの UV メンバを設定

	形式	setUV4(p, u0, v0, u1, v1, u2, v2, u3, v3)	
	
	引数	p		プリミティブのポインタ
		u0,v0...u3,v3	プリミティブの UV メンバ
	
	解説	プリミティブ p の UV メンバに値を設定する。
	
	備考	マクロであるためプリミティブの型に依存しない。
	
setUVWH		４点指定プリミティブの UV メンバを設定
	
	形式	setUVWH(p, u0, v0, w, h)				
	
	引数	p		プリミティブのポインタ
		u0,v0		プリミティブのテクスチャの左上端点
		w, h		プリミティブのテクスチャの幅と高さ

	解説	(u0,v0)-(u0+w,v0+h) を対角線にもつ矩形の各座標をプリミ
		ティブの (u0,v0)..(u3,v3) メンバに指定する。

	返り値	なし
	
	備考	マクロであるためプリミティブの型に依存しない。
		スプライトプリミティブには、使用できない。
	
*関数・マクロ一覧
ResetGraph	描画エンジンを初期化
SetGraphDebug	デバッグレベルを設定
GetGraphDebug	現在のデバッグレベルを獲得
SetDispMask	ディスプレイマスクを設定
PutDrawEnv	描画環境を設定する。
PutDispEnv	表示環境を設定
GetDrawEnv	現在の描画環境を獲得
GetDispEnv	現在の表示環境を獲得
LoadImage	フレームバッファにデータを転送
StoreImage	フレームバッファからデータを転送
MoveImage	フレームバッファ間でデータを転送
ClearImage	フレームバッファ高速塗りつぶし
SetDrawEnv	描画環境変更プリミティブの内容を初期化
SetDrawMode	描画モードプリミティブの内容を初期化
SetTexWindow	テクスチャウィンドウプリミティブの内容を初期化
SetDrawArea	描画範囲設定プリミティブの内容を初期化
SetDrawOffset	描画オフセット設定プリミティブの内容を初期化
SetDrawMove	MoveImage プリミティブの内容を初期化
SetPolyF3	フラットシェーディング３角形プリミティブを初期化
SetPolyF4	フラットシェーディング４角形プリミティブを初期化
SetPolyG3	グーローシェーディング３角形プリミティブを初期化
SetPolyG4	グーローシェーディング４角形プリミティブを初期化
SetPolyFT3	フラットテクスチャ３角形プリミティブを初期化
SetPolyFT4	フラットテクスチャ４角形プリミティブを初期化
SetPolyGT3	グーローテクスチャ３角形プリミティブを初期化
SetPolyGT4	グーローテクスチャ４角形プリミティブを初期化
SetSprt		スプライトプリミティブを初期化
SetSprt8	8x8 スプライトプリミティブを初期化
SetSprt16	16x16 スプライトプリミティブを初期化
SetTile		タイルプリミティブを初期化
SetTile1	1x1タイルプリミティブを初期化
SetTile8	8x8タイルプリミティブを初期化
SetTile16	16x16タイルプリミティブを初期化
SetLineF2	フラット非連結直線描画プリミティブを初期化
SetLineF3	フラット１連結直線描画プリミティブを初期化
SetLineF4	フラット２連結直線描画プリミティブ
SetLineG2	グーロー非連結直線描画プリミティブを初期化
SetLineG3	グーロー１連結直線描画プリミティブを初期化
SetLineG4	グーロー２連結直線描画プリミティブを初期化
SetSemiTrans	プリミティブに半透明属性を設定
SetShadeTex	シェーディング機能の禁止
GetTPage	プリミティブの tpage メンバの値を計算
GetClut		プリミティブの clut メンバの値を計算
AddPrim		描画するプリミティブをＯＴに登録
AddPrims	描画するプリミティブをまとめてＯＴに登録
NextPrim	プリミティブリストの次のプリミティブを獲得
CatPrim		プリミティブリストを連結
TermPrim	プリミティブリストを終端
IsEndPrim	リストの最後尾のプリミティブを判定
MargePrim	複数のプリミティブを結合				
CheckPrim	プリミティブの各メンバの値の整合性をチェック
ClearOTag	ＯＴを初期化する
ClearOTagR	n の 逆順ＯＴを初期化
DrawPrim	プリミティブを描画
DrawOTag	ＯＴに登録されたプリミティブを描画
DrawOTagIO	ＯＴに登録されたプリミティブを描画
BreakDraw	描画を中断する
DrawSync	全ての描画の終了を待つ
DrawSyncCallback	描画終了コールバック関数を設定
SetDefDrawEnv	標準の描画環境を設定
SetDefDispEnv	標準の表示環境を設定
LoadTPage	テクスチャページをロード
LoadClut	テクスチャ CLUT をロード
FntLoad		フォントパターンを転送
FntOpen		プリントストリームをオープン
FntPrint	プリントストリームに出力
FntFlush	プリントストリーム内容を描画
KanjiFntOpen	プリントストリームをオープン
KanjiFntPrint	プリントストリームに出力				
KanjiFntFlush	プリントストリーム内容を描画				
GetTimSize	Krom2Tim() で返される Tim データの領域のサイズを計算する
Krom2Tim	SJIS 文字列を 4 bits clut の Tim データに変換する	
OpenTIM		TIM データをオープン
ReadTIM		TIM ヘッダを解析
OpenTMD		TMD データをオープン
ReadTMD		TMD プリミティブの内容を解析
SetDumpFnt	オンスクリーンダンプのためのストリームを定義
DumpOTag	ＯＴに登録されたプリミティブをプリント
DumpTPage	プリミティブの tpage メンバの内容をプリント
DumpClut	プリミティブの clut メンバの内容をプリント
DumpDrawEnv	描画環境構造体の内容をプリント
DumpDispEnv	描画環境構造体の内容をプリント
setVector	ベクトルに値を設定
addVector	ベクトルの加算
copyVector	ベクトルのコピー
setRECT		矩形領域の設定
setRGB0		プリミティブの RGB メンバを設定
setRGB1		プリミティブの RGB メンバを設定
setRGB2		プリミティブの RGB メンバを設定
setRGB3		プリミティブの RGB メンバを設定
setXY0		プリミティブの XY メンバを設定
setXY2		プリミティブの XY メンバを設定
setXY3		プリミティブの XY メンバを設定
setXY4		プリミティブの XY メンバを設定
setXYWH		４点指定プリミティブの XY メンバを設定
setWH		プリミティブ p の w, h メンバに値を設定する。
setUV0		プリミティブの UV メンバを設定
setUV3		プリミティブの UV メンバを設定
setUV4		プリミティブの UV メンバを設定
setUVWH		４点指定プリミティブの UV メンバを設定
